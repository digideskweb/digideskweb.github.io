{"response": [{"author_name": "bmunch", "gravatar_hash": "8f6250d87c7d8cfe972d749ca3ddd0e8", "author_url": "http://blogmunch.com", "date": "May 06, 2008", "message": "Hi, just a small question on pagerank. I notice the main page stackoverflow.com have a pagerank of 4 in such a small period of time. How did you manage it? Is this domain ranked before you bought it?\n\nThanks.\n\nBmunch"}, {"author_name": "Merus", "gravatar_hash": "b7e35651f25986c1c6f61ffca814b640", "author_url": null, "date": "May 06, 2008", "message": "bmunch: At a guess, probably because it was linked to by Jeff and Joel, whose PageRanks can't be too shabby considering their popularity.\n\nI'm going to puase the podcast here to shake my head at Joel getting MVC and OOP confused. Wasn't the whole point of OOP <i>separating</i> things so that you could treat each section of code as a separate, discrete entity? The idea of MVC, I gathered, was that you were more or less doing that for a regular program: you've got one piece for what you show to the user, another for the underlying storage and calculations, and one for joining the two together and everything else you need to make the program work."}, {"author_name": "Martin H. Normark", "gravatar_hash": "0310d3cf8c61eeefd8195c0bcc6e90f6", "author_url": "http://www.dnknormark.net", "date": "May 06, 2008", "message": "Are you throttling bandwith on your podcast downloads? I'm downloading the mp3 file to my Windows Mobile device, and I only get ~38 kb through per second. Reminds me of the days of dial-up connections."}, {"author_name": "Edward", "gravatar_hash": "2c6276462696b307d9767a19aeec0dfa", "author_url": null, "date": "May 06, 2008", "message": "I haven't listen to the podcast yet...will do asap\n@Merus\nI belive OOP came from the old ADT (something to lookup if you do not know about it) and MVC came from OOP. \nC++ on the other hand is more a toolset of \"handy\" stuff like templates and exceptions which I don't really think comes from any \"theory\"\n\n/My 5cents"}, {"author_name": "Jeff Atwood", "gravatar_hash": "e9da1ed3cdab00371ed1c2ff4520907c", "author_url": "http://www.stackoverflow.com/", "date": "May 07, 2008", "message": "Hi Martin,\n\nFor the MP3 datatype, we burst to 500 kb, then throttle to about 40 kb/sec. This is to help preserve bandwidth for people who start listening, then drop off in the middle -- we don't end up serving 20 MB of audio data to these people."}, {"author_name": "Martin H. Normark", "gravatar_hash": "0310d3cf8c61eeefd8195c0bcc6e90f6", "author_url": "http://www.dnknormark.net", "date": "May 07, 2008", "message": "@Jeff\n\nThat's what I thought. I was just wondering why it took so long to download a relatively small file."}, {"author_name": "[ICR]", "gravatar_hash": "48a02e16370caadaedff78e2a94656ce", "author_url": "http://www.morethannothing.co.uk", "date": "May 07, 2008", "message": "Just a small anal note, but the background to the logo is just off white (254,254,254). Only noticable at odd wide angles on an LCD screen but I'm sure it's not a difficult thing to fix."}, {"author_name": "Tim Howland", "gravatar_hash": "6e24f47aa88626872c16e0f740739e8a", "author_url": "http://www.wdogsystems.com", "date": "May 07, 2008", "message": "With regard to Joel's question about the utility of building skinnable websites: every website needs to be skinned at least once- when it's being built.\n\nFor high-end websites, your backend coders are simply incapable of doing the kind of HTML and CSS work with any degree of efficiency or design consistency. You need to separate the look and feel from the backend development in order to develop the site quickly.\n\nThis separation of concerns is really what's driving the move to CSS; the ability to efficiently split up the project into a UI team (mostly handling the look and feel) and a backend team (mostly handling the controller and model) is the only way to get a big website done efficiently.\n\nEven if you never re-skin, the production efficiencies are significant for a non-trivial site."}, {"author_name": "alto malt\u00e9s", "gravatar_hash": "49653b4d686c57ff6c68dc19f709356f", "author_url": null, "date": "May 07, 2008", "message": "Isn\u2019t it wikipedia.<em>org</em>?"}, {"author_name": "Josh", "gravatar_hash": "4a3644f49db41a7d7f42b4c679e7864c", "author_url": null, "date": "May 07, 2008", "message": "The link to Maker Faire is broken - I believe you intended to link to http://makerfaire.com/."}, {"author_name": "Ethan Gunderson", "gravatar_hash": "dd541ba9446705375e6400dffbb3de5d", "author_url": null, "date": "May 07, 2008", "message": "@alto,\n\nThey link to the same site."}, {"author_name": "Jason Smith", "gravatar_hash": "fe3e1f48405042c68e4056dce0931535", "author_url": null, "date": "May 07, 2008", "message": "Any reason the Podcast I downloaded from iTunes was 19:05 long?  The one linked here is much longer.  I am now using the blog's...."}, {"author_name": "Marcus", "gravatar_hash": "bfc873b87c9d179a0b422d1e70acd0b4", "author_url": null, "date": "May 07, 2008", "message": "I have high hopes for the site when it starts to take off.  I also enjoyed the first podcast and most of the second.  But this site / podcast is going nowhere but down. \n\nYou two have very different viewpoints on technology and that can be a good thing.  But to listen to an hour of you both bickering about the pros and cons of MVC and OOP when you can't even articulate the design and qualities of such frameworks is appalling. \n\nJeff, you should be explaining that when you mix your view and model in a way that Joel advocates, that you create difficult to maintain code (Not because it allows you to skin a site.)  You also then have to rely on developers to design your site.  You prevent reusability and refactoring because your design is muddled with your data every place you display your data.  You force code refactoring and site regression every time you want to put an object in a different place on the screen.  There are a lot of reasons to use these frameworks, and having a skinnable site is probably at the very bottom of the list.\n\nAnd Joel, you sound like a dinosaur afraid of \u201cnew\u201d (but really established) development practices proven to be effective a majority of the time.  Your talk of a giant unmanageable css file denotes a bad coding practice of putting all your css code in one file, not a problem with css.  Split it up, use the inheritance structure of css to extend your display components.  If you want something on the other side of the page, then yes use css to do that.  The fact that you find it difficult to do so shows how little you understand css design and separation of views from your models.\n\nHonestly, I\u2019m going to be one less person that listens to your show if this keeps going.  I don\u2019t think you have a duty to change, but I hope you change your focus because I would really like to be a part of this site.  I could go into much further detail about why your viewpoints on technology seem ancient (and this is coming from someone who has been doing dev in the Microsoft and Linux arena for almost 15 years.)  but I\u2019m not out to change your view on technology, just on what you discuss (and how you discuss it) on your podcast."}, {"author_name": "Sean", "gravatar_hash": "6e2f1ba1ee04efb325d287637d17d855", "author_url": null, "date": "May 07, 2008", "message": "In your list at the top here, you mentioned you talked about the difference between a \"C corporation and a Limited Liability Corporation\".\n\nJust so you know, an LLC is a Limited Liability COMPANY, not corporation. LLCs are not corporations."}, {"author_name": "Stephen Hill", "gravatar_hash": "05e9ba4193d823a238da43fb1b5f18e0", "author_url": "http://stephenandlouise.co.uk", "date": "May 07, 2008", "message": "Hi,\n\nJust want to say I really enjoy listening to your podcasts, despite some people, and even though the topic may go off on a tangent, it's both entertaining and informative.\n\nI have a few questions which I would like to record and email to you, but don't really have the time to setup a microphone and software etc.\n\n1) I know this question crops up again and again but! I would like to know what will make stackoverflow.com different to experts-exchange which also has a Q&amp;A System that offers points to the user?\n\n2) With it being what I understand to be a Q&amp;A system as such, how are you going to handle people asking the same question in different ways?\n\n3) How can one help alpha/beta test the website?\n\nKeep it up guys and I will continue reading and listening.\n\nCheers\nStephen"}, {"author_name": "Chris", "gravatar_hash": "7c9a1a044d37d87392e4f009d68e6ac3", "author_url": null, "date": "May 07, 2008", "message": "Hey Jeff and Joel,\n\nYou might want to check out disqus.com\nI don't use their service but it might be related to how you implement blog comments.\n\nSo far I enjoy the podcasts, partially because I don't take them too seriously.  I'm not necessarily looking for technical advice.  I'm kind of listening as if I were watching 60 Minutes or Oprah.  I just like listening about issues and hearing your opinions.\n\nYou may want to make the format more organized and predictable (as opposed to \"let's talk about this, ok now this, let's digress here\").  There are too many digressions at times.  Maybe focus on two or three topics, then answer questions.  Perhaps the format is already organized, but it doesn't feel that way when I listen.  Just look at how many bullet points you have in the podcast description."}, {"author_name": "Nick P.", "gravatar_hash": "63e9c00d834cf45871a1326daaeecccd", "author_url": "http://pc1oad1etter.blogspot.com", "date": "May 07, 2008", "message": "Wouldn't Wall have simply said if one doesn't like how something is done in Perl, there's probably another way to do it... in Perl ?  :-)"}, {"author_name": "Derek Morrison", "gravatar_hash": "9fed4b48a3837b75946b616fdffe7bfe", "author_url": "http://derek-morrison.com", "date": "May 07, 2008", "message": "Twitter's only for web celebs Joel? I disagree. I live in Huntsville, AL (a bit of a rural area) and after using Twitter for a few months am following around 50 people and have about the same number of followers. I've been very surprised at how, even in this area, I've been connected with other developers in the area and abroad. If I can not let it distract me, I think it can be a useful tool.\n\nI have a friend a few hours away in Anniston, AL (an even smaller city) that owns a company and he's had a similar experience with connecting to business partners.\n\nPlease try things before you bash them, you cranky geek ;)\n\nThanks for the shows guys and keep them coming!"}, {"author_name": "Nick P.", "gravatar_hash": "63e9c00d834cf45871a1326daaeecccd", "author_url": "http://pc1oad1etter.blogspot.com", "date": "May 07, 2008", "message": "Why are telling us about your legal status and thoughts about lawyers?  I think some of your discussion is way off topic, not what we really need.  But it's your podcast, I realize."}, {"author_name": "shawn", "gravatar_hash": "f878a55e08bacee0af48852c29a02dc7", "author_url": null, "date": "May 07, 2008", "message": "I really disagree with those above that didn't like the shows format/content. I thought Joel's comments on CSS really do illustrate CSS's shortcomings. I know a lot of developers who feel the same way. The separation between HTML data and style has always felt strange to me since the order and structure of your HTML affects the style. I think Jeff pointed out how we are accustomed to name divs stuff like 'div-header'. It seems like div's class should really be describing the data, not act as shorthand for the style.\n\nI thought the lawyer discussion was really informative, and it's cool that you guys would throw it out there. I read an article about The Pirate Bay (who I love, don't get me wrong) where some RIAA guy says something like 'it's beneficial to them to act like fighting for people's rights, since more people will use the service and they will generate more ad revenue.' You have to remember that as cool as a company seems, they're still a company, and it's good for them to be honest about it.\n\nI was a little disappointed with the grad school discussion. Before I listened, I read the podcast's topics, and I was hoping to get some insight on grad school. I just graduated from Temple University in Philadelphia about a year ago, and started a salaried position doing .net web apps. I didn't get into programming until about 2 years before I graduated, and Temple wasn't the greatest school. So at this point, I'm asking myself if I should go into serious debt (50k or so, minus what I lose by not working) getting a Masters of Computer Science from Drexel. I don't think I even need the degree since it doesn't seem to help with scoring jobs, but I think I'd learn a lot of great stuff. I wished there was a more substantive answer during that segment. Maybe it'll get a better response as an actual question on stackoverflow. :p"}, {"author_name": "Jeff Atwood", "gravatar_hash": "e9da1ed3cdab00371ed1c2ff4520907c", "author_url": "http://www.stackoverflow.com/", "date": "May 07, 2008", "message": "Thanks for the corrections, I've updated the post.\n\n> So far I enjoy the podcasts, partially because I don\u2019t take them too seriously. I\u2019m not necessarily looking for technical advice.\n\nI agree, it's difficult to get very technical in a telephone call -- Joel maintains podcasts are often listened to in \"background\" mode, where you tune in and out while you're driving or working out or whatever. You shouldn't need to give it your full attention to get something out of it.\n\nI struggled with that as well."}, {"author_name": "Chris Conway", "gravatar_hash": "c1cc649bda672575d17d588b81513dfd", "author_url": "http://procrastiblog.blogspot.com", "date": "May 07, 2008", "message": "@shawn, I think Joel was pretty much right: the value of a graduate degree depends on your individual situation. A Masters in CS can open some doors for you and you'll learn \"a lot of great stuff.\" But if you have a well-paying job writing software, it's not likely to have a high ROI (in purely economic terms)."}, {"author_name": "Michael", "gravatar_hash": "6dd032f77ee05ce5e35a4ad90686b276", "author_url": "http://rhinovirus.org", "date": "May 07, 2008", "message": "Hey Jeff and Joel,\n\nYou guys were talking about how evil users may try to game the system for rep, if you award rep automatically to people who changed something then people will start writing scripts to change every occurrence of (brackets) to - dashes - and every comma to semicolons. There will also be people who - while trying to clarify/consolidate a question - make it harder to read or differ from the original meaning.\n\nYou should have a system where people can suggest changes to posts but only the initial author can implement the changes into the actual post. Other people would have the option to see and vote on the suggested changes but it doesn't actually effect the initial state of a post until the author or perhaps even a moderator applies the change.\n\nThis would prevent karma awarded for trivial changes, reduce the effect a troll/spammer might have, and make sure that only the best edits made it into questions/answers.\n\nGood luck on stackoverflow!"}, {"author_name": "agnul", "gravatar_hash": "ee62f45441fbf8409dfd4adaa40a74aa", "author_url": null, "date": "May 08, 2008", "message": "Would it be possible to add a track number to the mp3 file tags so that players could tell different episodes apart?"}, {"author_name": "Richard", "gravatar_hash": "ec8d86bf9ecad041e1fd4f5a0743d837", "author_url": null, "date": "May 08, 2008", "message": "I am enjoying the slightly random nature of the topics being discussed. The discussion of legal issues and underlying technologies gave a good insight into what is required when starting a new venture. I will enjoy seeing how the project progresses. \n\nMight I suggest you run another little competition to compose some intro music for the podcast."}, {"author_name": "Ben Richardson", "gravatar_hash": "456c9cc0e9a40518bb0976b1bf161cd4", "author_url": "http://www.freshview.com", "date": "May 08, 2008", "message": "As someone with a similar background to you Jeff (started with asp, adopted asp.net early and now experimenting in asp.net MVC) I was very interested in hearing you guys discuss this new framework.\n\nWhat really surprised me was that there was no mention of the fact that the MVC framework makes it a hell of a lot easier to write automated tests for your code, especially unit tests that don't need to run in the asp.net process and thus run very fast (which means they'll also be run more often).\n\nThis is the number 1 reason we're moving towards the MVC framework - if you won't be taking advantage of automated testing I'm wondering if you're just using MVC because it's the new cool kid on the block (jab jab ;-)."}, {"author_name": "Eli Courtwright", "gravatar_hash": "bd42b746d79be5dd325a8e94bc00ac58", "author_url": null, "date": "May 08, 2008", "message": "I propose a compromise: Jeff learns C and Joel tries out Twitter."}, {"author_name": "Mike Ivanov", "gravatar_hash": "67e0d3c9f013f079f29abf61118d4b87", "author_url": null, "date": "May 08, 2008", "message": "Commented on the wrong post by accident.\n\nYou guys focused on HTML and CSS as the model/view, but isn\u2019t XML and XSLT a more apt analogy? It certainly allows you to do the sorts of things Joel was talking about, such as turn a pulldown into a list with checkboxes or another type of control without worrying about where the data is coming from, or easily changing the order of elements in your HTML, and so on."}, {"author_name": "Chad", "gravatar_hash": "769d01d1649aeb4bc2f09c37ff4983a2", "author_url": null, "date": "May 08, 2008", "message": "Hey Jeff,\nA couple of ideas/suggestions when you have a chance. I realize these are totally unsolicited. Do with them what you will.\n\n1. Consider creating chapters in the podcast. There are clear topic changes and moving from one to the next would be more convenient with bookmarks. I have no idea how much post-production is involved but many (all) of my subscriptions running over 10 minutes use this technique.\n\n2. Use stackoverflow to not only originate Q&amp;A threads but also to aggregate a variety of popular sites. Topics from these other sites might be very useful seeds for stackoverflow threads. I suspect a lot of users will reference these sites anyway. Does it make sense to make stackoverflow a one-stop-shop in that sense? I might be missing your intentions for stackoverflow but this would be useful service for me. I don't want to mix paradigms here but what about stackoverflow as something like Bloglines for programmers? I don't use the blog facilities of Bloglines but might if interaction was cast as more of a Q&amp;A.\n\nThanks for content so far and for the chance to share ideas,\nChad"}, {"author_name": "Colin Meeks", "gravatar_hash": "acee6af77f180b606b4052bd53c0e459", "author_url": "http://www.programmedintegration.com", "date": "May 08, 2008", "message": "There is a web service that indexes media and makes it searchable. http://www.everyzing.com/\n\nNot too sure how much use it will be to you, but used it on a few web projects as an additional way of allowing users to find content.\n\nColin"}, {"author_name": "Andy Herrman", "gravatar_hash": "2bd9e4e00647ecf35aba651054861e5e", "author_url": null, "date": "May 08, 2008", "message": "I like the podcast so far, but I feel the need to comment on the MVC stuff.\n\nI think part of the reason Joel didn't like the MVC stuff was the example used.  I don't really think the browser example that Jeff gave is a particularly good one (though it probably is one of the most common now).\n\nFor me, MVC means the following:\n  * Model - the data structures that store the current state of the system\n  * View - The UI provided to display the state\n  * Controller - The code that takes commands from the UI and updates the model\n\nThis separation is *very* useful if you're writing something where you might want to have multiple UIs.  For a (possibly too) simple example, say you're writing a chat application.  Your model would be the current list of messages received.  The view would be your UI for displaying the history and sending new messages.  The controller would handle when the user hits the send button and actually sends the message, and also receives messages from the server and updates the model.\n\nNow, with the MVC separation, you can create multiple UIs with very different behavior (say, a console app using ncurses, a normal GUI as a native app, and a web-based app).  In all these cases, the only difference is the UI.  The act of sending a message, and the actual message history, doesn't change.  So, by splitting your code up using an MVC pattern, changing/adding UIs means you don't have to touch any of the actual logic.\n\nSimilarly, say you decided to rewrite your chat server.  Same basic functionality, but you decided your old way of sending raw binary data over some random socket is stupid, and you want to use XML over HTTP.  You just rewrite the controller, and don't have to deal with/care about the UI or model.\n\nAs I said, this is a very simple example, but I think it demonstrates the usefulness of the MVC pattern much more than the HTML/CSS/Browser example Jeff gave.\n\nJoel, does that make more sense/seem more useful than just some hypothetical desire to have a skinnable app?\n\nOne final note: I wish the developers of the app I worked on a couple years ago had gone with an MVC approach.  Management decided it was time to completely redesign/rework the UI, and because it was all jumbled together in the code it ended up being simpler to just rewrite the entire thing (using MVC principles) than to try and modify the existing code.  Had the original code been MVC we could have rewritten the UI without caring about the rest.\n\n  -Andy"}, {"author_name": "Arnor Heidar", "gravatar_hash": "bea4c269123970af0124a2e2fb183633", "author_url": null, "date": "May 08, 2008", "message": "Hey guys - I'm a long time reader of both your blogs.\n\nI love this podcast and to hear the voices behind the blogging and it's also very fun to hear to totally different opinions on very common programming topics - that in itself is a good reason to read this blog.\n\nI have to agree with Marcus on that your discussion of the MVC was a bit off.\n\nJeff, you've obviously only looked at MVC from the standpoint of .net MVC - but MVC frameworks have been in use for years outside of the .Net world of web programming.. Symfony, CodeIgniter, Rails (obviously) and such all apply this model-view-controller structure in the most elegant way - I think it would do Joel good to have a look at it ;-)\n\nHowever, the analogy of CSS vs HTML with MVC is totally irrelevant, since HTML code is also a part of the \"view\" - MVC has to do with the structure of your code - not to do with CSS vs. HTML-based layouts or such (even though you should always use CSS)\n\nMost of the time, I agree with Joel's views, since they are very typical for a \"practical\" programmer - where good, reusable results matter - not how \"beautiful\" the concept of your code is.  But this will always be an everlasting debate :)\n\nWhatever, anyways, great work, love your blogs, keep up this podcast!"}, {"author_name": "friarminor", "gravatar_hash": "a26d509eb8e6a26340df0949b322b202", "author_url": "http://eedious.blogspot.com", "date": "May 08, 2008", "message": "Keep it up, you two.  I'm no programmer but i really am interested and having to listen to this podcasts is another avenue for learning.\n\nAnd forget about reaching critical mass or numbers for now.  You can't address all in about one sitting or even a couple.  Follow your instincts.  You already are getting participation by playing those user questions and keep at it.\n\nBest.\nalain"}, {"author_name": "Rob Allen", "gravatar_hash": "1b4baeca54cbf0b193744120c6989002", "author_url": "http://Robspages.net", "date": "May 09, 2008", "message": "Jeff + Joel, \n\nI'm intrigued by Joel's comments regarding how style sheets add an additional place you have to look when modifying, correcting or reusing mark-up. I was left thinking there has to be a better way that doesn't involve .Net style objects for simple things like an image tag. \n\nI have yet to think of a decent way to tackle this, but the readers, listeners, and potential audience for Stackoverflow might be the place to flush something out. \n\nI know religious wars over languages and frameworks are off limits but would Stackoverflow allow such philosophical discussion?"}, {"author_name": "Mike Houston", "gravatar_hash": "022fe2db16030426e9566e2f3fae8692", "author_url": null, "date": "May 09, 2008", "message": "I was amused by Joel's comment ~23.40 'are you really going to go in and skin Gmail?... How could anyone possibly have time...'\n\nThat's a good question, but plenty of people do, it seems :)\n\nhttp://userstyles.org/styles/5867"}, {"author_name": "Tom Steele", "gravatar_hash": "f03d8ec7e0c6a589e8a6ce46c8ec2c44", "author_url": null, "date": "May 09, 2008", "message": "A little too much \"I\" and \"we\" attitude. Remember Kathy Sierra!\n\nThe best part was having two \"rock star\" individuals in the software development community disagree on something like MVC. Pro and con arguments like this are very helpful no matter which camp you are in.\n\nIn my opinion, you may have stumbled upon a great format for a podcast. Two popular pundits debating development technology, trends and other interesting things."}, {"author_name": "Arend", "gravatar_hash": "9d730dbe2e46eb4913c4e5228a8053e6", "author_url": "http://arend-von-reinersdorff.com/folders4gmail/", "date": "May 09, 2008", "message": "Skinning gmail: \n\nThe Greasemonkey community is quite busy doing just this:\nhttp://userscripts.org/tags/gmail\nhttp://lifehacker.com/software/exclusive-lifehacker-download/better-gmail-2-firefox-extension-for-new-gmail-320618.php\n\nFor example:\nHide the spam count\nhttp://userscripts.org/scripts/show/22660\n\nArrange the labels in a folder-like hierarchy\nhttp://arend-von-reinersdorff.com/folders4gmail/\n\nOf course, Greasemonkey users are hardly the majority."}, {"author_name": "Sean T. McBeth", "gravatar_hash": "c575053db2ab2cf1415a57d832b95191", "author_url": "http://www.seanmcbeth.com", "date": "May 09, 2008", "message": "I have a project right now that has three different clients, a command line client, a desktop GUI client, and a web app client. Each one is so completely different from the other, that I *have* to have a well defined \"view\" system in an MVC architecture in order to make it all work. There are so many different ways to consume my data that I consider the HTML as much as part of the \"view\" as the CSS. To consider the HTML as part of anything other than the \"view\" really limits you to web applications as your distribution mode. There is nothing wrong with using an IMG tag, even if the IMG's SRC attribute is hardcoded, because that IMG tag has no importance to any other way you could consume this data. And by all means, there is nothing wrong with using TABLEs, but that is a different issue from which I digress.\n\nAdditionally, I have SQLServer, MySQL, and an XML file data source options. In order to make it possible to allow my users to choose which they are going to use, I need to have a well defined \"model\" in my MVC architecture. That's why my data access code needs to be part of the \"model\" portion of the project, because the data access code is going to be specific to each data source.\n\nIncidentally, I am only interested in a single \"controller\". My controller is my logic. It's probably the least amount of code of all three parts, but it's also the most inspired. It really isn't possible to swap out different controllers.\n\nThis is the entire point of MVC: I've got multiple data sources that I will want to use with my application, I've got multiple end-points where I'm going to want to consume that data, how do I make my life easier to be able mix and match these chunks with my one application? So, by pushing all the code that is specific to your data source into a project called \"model\", and pushing all the code that is specific to a particular UI into a project called \"view\", you can write a single \"controller\" between the two and make life not suck so much.\n\nUpdating a single instance of the view, that's a different issue completely. Skinning is updating a view, it's not two different views. Two different views on one data source might be how a Production Worker versus how a Finance Manager see an inventory shortage reporting system. This is *not* a Green UI versus a Blue UI. The colors, the styling, the orientation, they do nothing to change *how* the data is consumed.\n\nThis is completely different than just plain Object Oriented Programming. It's on a much higher level than OOP. OOP brings you down to the code level, MVC just organizes your code."}, {"author_name": "David Robbins", "gravatar_hash": "e90d3971be54d06acc1623585de1cda2", "author_url": null, "date": "May 10, 2008", "message": "In regards to audience, I wouldn't concern yourself over numbers.  Jeff, I remember you posted on your blog about your persistence when you started blogging and how you eventually found your \"voice\".  I think the same applies here.\n\nI think it would be fair to say that you guys are not intending to be DOTNetRocks.  Carl and Richard have the advantage in that they have guests who have a set topic that they focus on, whereas you guys have to create the content each week - double the work. Now add to that presentation, which in a podcast medium is different than the process that you use for blogging.\n\nYou may need to create segments to the podcasts:  \n\n1.  I hate X because of ... - short topic to plant a seed, or generate conversation. \n\n2.  War stories - how you got yourself into trouble and what saved you.  Both of you guys have so much experience and sharing obstacles that you have conquered with code, technique, or disciplined use of basics would be great to hear.\n\n3.  Debate is good, maybe pick one topic and REALLY go at it.\n\n4.  Contra to 3 - when you get in a flow, charge ahead!  But I still think you need to frame the show with some distinct transitions.\n\n5.  That guy (Marcus) who threatened to not listen anymore - get him on your podcast and talk it up with him!  \"Dude - we suck that bad at discussing MVC?!  Enlighten us!\" A little self effacing smack down.  Think of it like this - when Ted Neward or Mark Miller run their mouths, it brings energy to the discussion.  His opposition to you presentation will draw you guys out.\n\nEasy for me to comment from the peanut gallery, I know, but I like what you guys are trying to do."}, {"author_name": "Matt Howells", "gravatar_hash": "eadbfa2dfab5f30a32e81bd92b04044b", "author_url": null, "date": "May 11, 2008", "message": "Maye Joel was just playing devil's advocate, but the MVC pattern is not really comparable to separating data and the methods that act on that data. It is about the separation of _concerns_. It is about making the right abstractions, and producing concise, maintainable, testable code.\nThe ASP.NET code-behind model still has strong coupling between the html and the executable code, and by default leads you down the murky path of keeping your presentation, business logic and data access in one place.\nI'm sure I don't need to elaborate any further to your audience as to why separating out the details of how your model will be displayed, from the data and operations which act on the data, and defining a strict interface between them, is a Good Thing. At the moment I'm heavily using a Model-View-Presenter pattern with ASP.NET 2.0, to keep the ASP.NET layer as thin as possible - the presenters and model are in separate assemblies which are easily NUnit testable with mocks or stubs for the views.\nReally looking forward to stackoverflow.com - I voted for that name! Happy hacking Jeff."}, {"author_name": "Matt", "gravatar_hash": "2f7472961732d91cb682bf422c9481ed", "author_url": null, "date": "May 13, 2008", "message": "I almost stopped listening b/c of all of Joel's devil's advocacy... :("}, {"author_name": "mdy", "gravatar_hash": "82d287dc21555e439295cd924c9f3d3d", "author_url": "https://twitter.com/mdy", "date": "May 13, 2008", "message": "This may have been brought up already by others who have commented on earlier podcast episodes, but here goes... \n\nIs it possible for paragraphs in the podcast transcript to have anchors? \n\nI ask this because:\n\n1. There are times when I know a specific 5-min segment in the podcast will be of interest to a friend, but I have no easy way to direct their attention to the relevant section of the transcript. \n\n2. There have also been times when I am skimming the show notes posted on the blog, and when a topic is interesting, it's my instinct to look for a link that I can click to read the transcript of that specific section.\n\nAnyway, that's all from me. Thanks for this podcast!"}, {"author_name": "Ian Anderson", "gravatar_hash": "60b1c7dc18e08e1a16f313354814744f", "author_url": "http://thefirstpost.co.uk", "date": "May 14, 2008", "message": "++thanks for great podcast, guys. You explained very clearly in #1 that this is a conversation you guys were going to have anyway and not solely for the entertainment and education of the masses, so I think comments in which people are throwing rocks for going off-topic or whatever is unfair. \n\nBut your conversations are indeed entertaining and informative; I enjoy the humour, erudition and the personality from both Joel and Jeff. \n\nThe MVC thing is interesting because it revealed that two of the community's foremost practitioners have trouble with it too. That's actually reassuring, though it did make for frustrating listening. I agree with others that HTML/CSS is not the most helpful example but I actually agree with many of Joel's comments about CSS. Applied incorrectly, it can be more damaging than inline presentation. But I wanted to comment on MVC particularly.\n\nMVC is hard; there is indeed considerable debate about the best way to apply it to web apps, and there are probably a spectrum of ways of structuring MVC that are good, as well as many that are arguably wrong.\n\nI find the following structure useful; this is based partly on Zend Framework's folder structure for PHP MVC, complemented by a lot of reading around and working on apps:\n\nAPPLICATION\n  Controllers\n      Front Controller (single script for choosing view templates)\n  Model\n      Classes inc. DB Access\n Views\n      Templates (HTML with minimal code)\n      Helpers \n\nMy best understanding is that the controller is really just for routing requests, whether GET or POST and selecting which view template to display. Controller shouldn't do anything else.\n\nViews are HTML templates which instantiate objects and call methods on them; those objects are from classes which are of course your model. The model contains all the business logic, data access and helper (e.g. string/date manipulation) classes. \n\nYou should be able to use the same classes with a fundamentally different view (e.g. mobile version, PDF generation) without changing any code in your classes. \n\nIn the View I also have helper functions; classes in the model should not generate any HTML, but you often benefit from reusable functions that can take arrays or objects and squirt out code; those view helper functions go in the View but separate from the HTML templates.\n\nView templates can contain minimal programming logic but only where it is to do with display - so loops and conditionals that alter the view state depending on information from the model are generally acceptable, if not indeed required. Everything else should be in the model. \n\nThere are other good structures that work too, but some are just dead wrong; for example, in my opinion, if you have SQL in your controllers (which I have seen recently), that's wrong and it's not MVC any more.\n\nJeff is dead right about the scarcity of good, accepted examples right now. \n\nHow can we get on the private beta? Can't wait...\n\nLooking forward to the next podcast, guys - great work"}, {"author_name": "Ian Anderson", "gravatar_hash": "60b1c7dc18e08e1a16f313354814744f", "author_url": "http://thefirstpost.co.uk", "date": "May 14, 2008", "message": "EEK - Fricking spaces got munged - attempt #2\n\nAPPLICATION\nControllers\n-- Front Controller (single script for choosing view templates)\nModel\n-- Classes inc. DB Access\nViews\n-- Templates (HTML with minimal code)\n-- Helpers"}, {"author_name": "Ian Anderson", "gravatar_hash": "60b1c7dc18e08e1a16f313354814744f", "author_url": "http://thefirstpost.co.uk", "date": "May 14, 2008", "message": "Oh, and here's a PHP example of how the application structure fits into the rest of the site structure, in case any of this of use for anyone\n\nAPPLICATION\n- Your application code as above (MVC)\nWWW (web root)\n- index.php (bootstrap file)\n- assets (gifs, jpegs etc)\nLIBRARY\n- frameworks e.g. Zend, Smarty\n\nAll requests go to index.php; this is bootstrap file which sets up the environment and loads the front controller. Convention is to use friendly URLS with slashes that are deconstructed into actions used by the front controller for routing.\n\nDamn, wouldn't it be great if there was some sort of community site where I could have posted all this? :)"}, {"author_name": "John Topley", "gravatar_hash": "3b687a35025c05dbc7627af428dff0da", "author_url": "http://www.johntopley.com/", "date": "May 14, 2008", "message": "I found Jeff's comment about not including an image tag for the site's logo to be a bit bizarre. Surely your logo is an integral part of your site and as such should appear with your content. I understand the point about wanting to easily change the logo but honestly, how often is that going to happen? If you use some sort of include mechanism then you only have to edit the image tags in one file anyway.\n\nThe rule of thumb I use is what would you want to still be visible on your site if CSS was turned off? I bet you'd want your logo to show up."}, {"author_name": "Roy", "gravatar_hash": "5af302dde60a6ada2180e5728d3b85bd", "author_url": null, "date": "May 15, 2008", "message": "So would it be possible to listen to the podcast without Joel ruining it?\n\nJeff help me out with this,  you're great, but man Joel just kills this podcast for me...  :("}, {"author_name": "Jim Robert", "gravatar_hash": "aa2c9c45372ed95ebd86c21d86766183", "author_url": "http://www.roboRobert.com", "date": "May 15, 2008", "message": "Hey! I love your podcast, just thought you should know"}, {"author_name": "joe", "gravatar_hash": "3d1504872c5439632396d6df42b6e007", "author_url": null, "date": "May 16, 2008", "message": "Sounds a lot like Yahoo Answers."}, {"author_name": "mmp1", "gravatar_hash": "83bcb6a6206265dc4456d6ef85c9b80d", "author_url": "http://www.missingmatterproductions.com", "date": "May 17, 2008", "message": "mvc stuff - depends on the problem.  Jeol questioned what number of apps need skinning ?  I wouldn't say there is actually a large number. But they may not be pure shrink wrap.  A lot of consulting ware would be a good candidate.  If you have ever been involved in a consultingware app, you are fine for the first release, then the professional service guys do the installs, and then 1 or 2 versions later, upgrades become very hard.  It is these sort of systems that could really benefit from skinning type development MINDSET and tools.  It's not really for expert users to customize gmail, it's real value for a lot of systems is to \"manage workflow\" including upgrade cycles between releases, especially for applications that encourage integration. \n\nAlso, once you guys get beyond the talks about doing blogs and you get to talking about solutions how are you going to handle code to assist in discussion ?  ie.  do you want people to contribute ? how is that going to  happen (oh no I wanted a code/programming question and i got a blog question...)."}, {"author_name": "Dennis", "gravatar_hash": "27e3a5b3568453883adb244aa071e5a1", "author_url": null, "date": "May 22, 2008", "message": "Logo contest: \"winner takes all\" is the right way.  The first runner up is just the first loser."}, {"author_name": "Harvey", "gravatar_hash": "18f44bb2c283b0582c098d61b3d93ca8", "author_url": null, "date": "Jun 03, 2008", "message": "Re: Your perspectives and MVC\n\nSean T. McBeth: ++ to your MVC comments\n\nI'm an embedded programmer and I've been slowly migrating our newer designs to MVC. It works like this:\n\nModel: contains data and methods for modifying data which controls the embedded device (via TCP/IP, RS-232, RS-485, other).\n\nView: the display (PDA, javascript webpage, Windows app, wxWidgets app)\nController: this we have in two pieces where one piece is platform agnostic to allow some common task code to be shared. The second piece is specific to the view and basically two sets of directional event handlers: GUI events (button clicks, etc.) and Update events (either the consequences of a local GUI event or the results of an event triggered by another connected GUI, etc.)\n\n---\nC language is very important in embedded design. I doubt my microwave/dvd player/car was coded in Ruby or ASP. But then, I can't say that for sure. :)"}, {"author_name": "aristo", "gravatar_hash": "9ef70ae2dd5d2ac960125115cf80b32f", "author_url": "http://www.aristo-samar.com", "date": "Jun 10, 2008", "message": "Jeff. You should really do those casts with someone else, who wont be interrupting you in the middle of EVERY sentense you ant to say...\n\nI really think like that\n\nMariusz"}, {"author_name": "Corey Trager", "gravatar_hash": "23da7be57867a7eb54b583983c89b375", "author_url": "http://ifdefined.com", "date": "Jun 21, 2008", "message": "With regards to what Joel said below about code-behind, questioning why is it better, I don't know if he was playing devil's advocate or what, but I share his questioning attitude.   \n\nI happen to have written an semi-popular free open source ASP.NET app (BugTracker.NET at http://ifdefined.com/bugtrackernet.html) that happens not to use code-behind.  When I started writing it, I just downloaded the .NET SDK and tackled it the way I had tackled Java, with a text editor, and with my \"classic\" ASP mindset.  I didn't eschew code behind to make some sort of political statement.  I simply didn't even know there was such a thing as code behind.  \n\nOnce I learned about code-behind, my attitude was, oh, that's nice, but no big deal.\n\nBut, then folks started downloading my app.  Many liked the app's behavior, but complained that I didn't use code-bheind.  One guy called me an arrogant idiot because of my not using code-behind.  Another guy called for the ASP.NET community to \"boycott\" my app.\n\nI was like an accidental Galileo...\n\nAt 411Asp.Net the comments are \"coding horror\", \"horrific html coding\", \"I have never seen such a bad .NET app\", \"An example of how not to code\".  Ouch.\n\nMy project is at Sourceforge and there have been at least two other attempts to start projects at Sourceforge whose main purpose has been to convert to code-behind.\n\nI wouldn't argue that the way I coded is better than code-behind, but I would say, it's not that big a deal  one way or the other.   If you put both HTML and C# in the same file, but that one file is well organized, then what's the big deal about splitting it into two files?  \n\nJoel's comments:\n\n\"..it's pretty rare not to use code-behind...I think most people would probably keep their, try to keep their C# or their VB in a different file than their HTML...I understand that that's what we keep telling them to do, but I'm just wondering why are we telling them that separation is a good thing when we just spent three generations of programmers putting the data and the methods that operate on that data together in the same classes?....It winds up in ...different places. And now [you're] even less happy...I'm just kind of wondering, it sort of sounds to me like you're trying to split up things just because of a certain type of anal retentiveness that programmers like to get themselves into. Where they're like 'God, it's cleaner if you separate something' and they just love to have these little separations that they have to spend a lot of effort maintaining. And it makes them feel good in some way...\""}, {"author_name": "Jeff", "gravatar_hash": "de0c46179963193304fa2af98823c037", "author_url": null, "date": "Jul 27, 2009", "message": "Corey,\n\nI realize this is an old post, but chin up.  Your BugTracker.Net is just fine, easy to support, and works like a charm.  This from a 19 year developer (last 9 have been spent in C#).\n\nThe reason there's not just one language, one platform, one UI, is because people have different opinions.  Sadly, attaboy's are rarely given out, while complaints are tossed out like beads at Mardi Gras."}]}