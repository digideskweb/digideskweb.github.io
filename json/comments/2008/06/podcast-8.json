{"response": [{"author_name": "Brent", "gravatar_hash": "9b905d6be69b0641d64d7cacc32d52d3", "author_url": null, "date": "Jun 04, 2008", "message": "First visit to the site. I was thinking \"there's something wrong with the logo\" for a good 4 seconds. Brilliant!"}, {"author_name": "Jack", "gravatar_hash": "25150abd45d3665e7f70df62646df097", "author_url": null, "date": "Jun 04, 2008", "message": "Brent, I'd like some of what you're on, sir."}, {"author_name": "Hass", "gravatar_hash": "8dd91d1af82a6e207d2cb348db78ee01", "author_url": null, "date": "Jun 04, 2008", "message": "Regarding the comments on extrapolation and anecdotal reality; this is in fact a fundermental part of human nature! Take the following example:\n\nA snake bites a boy in your village and he dies, or at least becomes seriously sick.\n\nThe next time you come across a snake in your village you don't think \"hey, I don't yet have a sufficiently large data sample  to form an opinion so I'll assume this snake is harmless\", no, you assume that ALL sankes are dangerous and beat the thing to death.\n\nInterestingly, this is a very widespread phenomenon in the areas of car manufacturers; \"I once had a XXXX and it was crap; therefore all XXXX's are crap\".\n\nIt's hard to get annoyed about human nature."}, {"author_name": "Hass", "gravatar_hash": "8dd91d1af82a6e207d2cb348db78ee01", "author_url": null, "date": "Jun 04, 2008", "message": "My apologies for my bad spelling in the previous post - I have lived in Sweden too long!"}, {"author_name": "Trout", "gravatar_hash": "7a0762465103aec8849fbff171f78acd", "author_url": "http://www.kevtrout.com", "date": "Jun 04, 2008", "message": "Jeff and Joel,\n\nEven if stack overflow doesn't happen, I'd still listen to your conversations.  Great podcast.  Please go on."}, {"author_name": "[ICR]", "gravatar_hash": "48a02e16370caadaedff78e2a94656ce", "author_url": "http://www.morethannothing.co.uk", "date": "Jun 04, 2008", "message": "Regarding DSLs, I think we're seeing a lot of DSLs embedded in other languages as strings (regex, XML, SQL). A lot of effort is being made to move some of these out into fist class concepts, such as regex's in perl, XML literals in VB and LINQ.\n\nHowever, though I could be *very* wrong here, a lot of the time there isn't a huge benefit to moving them out of strings other than stronger compile time checking. (I personally would say LINQ is an exception here).\n\nI've been thinking recently about an extensible component to a compiler which allows you to append a prefix to a string ( e.g. {Regex}\"a*\") which would specify a class with which to verify the validity of the string, called at compile time.\n\nThe effect of this would be compile time verification of DSLs embedded in strings. Of course, once it's verified the DSL it behaves just like a normal string (so you would still have to have Regex myRegex = new Regex({Regex}\"a*\");) This avoids the complexity and risks of a fully extensible compiler at the cost of some flexibility."}, {"author_name": "Michael Stum", "gravatar_hash": "411cf599ae9fe1ef80d40644c83c0f78", "author_url": "http://www.Stum.de", "date": "Jun 04, 2008", "message": "Regarding DSLs, i am not sure what Joel ment when he talked about \"creating arrays in the fly\"?\n\nYou can do that since .net 1.0 I believe:\nint[] MyArray = { 1, 2, 3 };"}, {"author_name": "Brad Gilbert", "gravatar_hash": "6a81b9b2f0280da70b19d2dddcd8dc03", "author_url": null, "date": "Jun 04, 2008", "message": "Just noticed this link, which has a good picture showing an overview of compiling a piece of code for Parrot.\nhttp://en.wikipedia.org/wiki/Parser_Grammar_Engine"}, {"author_name": "David Taylor", "gravatar_hash": "7c82aaf986a674b761c459ba64ba8f0d", "author_url": "http://www.detayls.com", "date": "Jun 04, 2008", "message": "Hass,\n\nYour quote:\n\n\"\u201cI once had a XXXX and it was crap; therefore all XXXX\u2019s are crap\u201d.\"\n\nThat is a fundamental phenomenon in our culture.  What they are really saying is:\n\n\"I learned something a while back and I have formed my opinion now.  Nothing will ever alter that opinion again because I am too lazy to even think about realizing that the only thing that is constant is change.\""}, {"author_name": "Donal", "gravatar_hash": "6904e80fadc510099176e489f56fe3d5", "author_url": null, "date": "Jun 04, 2008", "message": "@Michael\n\nThe comment Joel made about not being able to create arrays on the fly was with regard to Java rather than .Net. However, he's wrong about that too because the following has been possible since as long as I've been using Java:\n\nInteger[] numbers = {1, 2, 3};\n\nI think Joel also said you can't create Lists on the fly in Java. I don't know if this is \"on the fly\", but IMO it's pretty close:\n\nList numbers = Arrays.asList(1, 2, 3);"}, {"author_name": "Jon Galloway", "gravatar_hash": "63c32b4489d13b17d23fd9db1505bdf9", "author_url": "http://weblogs.asp.net/jgalloway", "date": "Jun 04, 2008", "message": "Joel made some comments about how SQL Server isn't self tuning, and that you have to manually run sp_updatestats to keep your statistics up to date. I haven't found that to be the case - a default SQL Server 2005 installation automatically creates and updates statistics, and those options have always worked for me. There's also an Auto Update Statistics Asynchronously option to prevent performance issue from updating stats under heavy database load. So, while he may have run into an issue where that didn't work, it may have been due to a specific case (such as a DBA turning off the Auto Update Statistics feature). It's definitely incorrect to say that SQL Server isn't self tuning.\n\nAnother unappreciated feature is that SQL Server will detect and fix corrupted indexes. I was very surprised to find that MySQL didn't do this when I first worked with it (probably improved by now), and a stats corruption issue took the entire database server down until you ran some index cleanup commands."}, {"author_name": "Brian Sullivan", "gravatar_hash": "a21cd584ff01df83adbf6b3d03d6ecdb", "author_url": "http://www.sullivansoftdev.com/blog", "date": "Jun 04, 2008", "message": "Jeff and Joel,\n\nThanks for continuing to produce this podcast!  I thoroughly enjoy listening to your conversations about technology.\n\nAs Joel said, though, I would try to steer clear of politics as much as possible.  You guys have a wide audience with, I'm sure, just as wide a variety of opinions. It could be off-putting to some listeners, even when you feel the comment to be fairly innocuous.\n\nI look forward to seeing stackoverflow.com in action!  Best of luck!"}, {"author_name": "drejc", "gravatar_hash": "9b9319dade67212ce94a60fcaa09df6e", "author_url": "http://www.monex-finance.net", "date": "Jun 04, 2008", "message": "Joel made a comment that he had an issue with a MySQL SELECT statement. I can recall that we had the same happening with SQL Server 6.0 where a SELECT COUNT on a view returned the wrong number of rows. This error was only present on a specific 6.0.XX version, and I have spend at least one month before I have found out that it is a SQL not an application error. \nBut I'm sure they have fixed it by now ... or not?"}, {"author_name": "Mark Harrison", "gravatar_hash": "f79b395a801bf291b74e8bccea8e03f8", "author_url": null, "date": "Jun 05, 2008", "message": "regarding the podcast name... currently it's \"podcast #8\", could you call it \"stackoverflow #8\"?  Then it displays nicely on my cheapo mp3 player."}, {"author_name": "Paul", "gravatar_hash": "5cb916d3c8abc9f45a093209e72489fb", "author_url": null, "date": "Jun 05, 2008", "message": "Re: [ICR]'s comment on DSLs..\n\nI think your regex example might be implementable in C++0x using the \"user-defined literals\" feature.\n\nIf you use the variadic templated form (\"template\") then you might be able to verify that the sequence of characters is a valid regex at compile time.\n\nhttp://en.wikipedia.org/wiki/C%2B%2B0x#User-defined_literals"}, {"author_name": "Anand", "gravatar_hash": "d3aeeb0f84c018de5f59c754ac58803e", "author_url": null, "date": "Jun 05, 2008", "message": "A few days ago, I was listening to the podcast was marvelling at how open you are with your plans for the site.  Then, today I came across this article (http://www.unionsquareventures.com/2008/06/the_spooky_econ.html)\n\nThe author says: \n\"Simply put the entrepreneurs who are aggressively open in describing their plans seem to do better than the ones who are cagey.\"\n\nI definitely agree with this statement. Keep up the good work with the podcasts. I definitely find them interesting."}, {"author_name": "Dennis", "gravatar_hash": "8836517222d65e4df1299d386f280bc7", "author_url": null, "date": "Jun 05, 2008", "message": "Regarding \"LINQ has it backwards\": Anders Hejlsberg, Chief Language Strategist at Microsoft talks about this (among other things) in Software Engineering Radio (thanks for that tip, BTW) episode 97 (http://www.se-radio.net/podcast/2008-05/episode-97-interview-anders-hejlsberg)."}, {"author_name": "joev", "gravatar_hash": "4e85e06e37762c7953210f57406dd0da", "author_url": null, "date": "Jun 05, 2008", "message": "Jeff, when you mentioned that databases should look at the queries coming in, and \"self-optimize\" by putting in the right indices, and otherwise trying to find out the best way to satisfy a similar query in the future, it sounded like you were reading my mind.  Whenever I'm working with other people on database-level stuff, I always complain about this.  DBAs within hearing distance always roll their eyes, but forcing an application developer to tune their app to accommodate the low-level intricacies of the DB vendors' implementation is so 20th century, not just wrong from an abstraction point of view.  I think your reasoning and comment on the \"Oracle priesthood\" is spot-on, and part of the problem."}, {"author_name": "Peter Christensen", "gravatar_hash": "40696bc398dddd8d404db51c437b4a3d", "author_url": "http://www.pchristensen.com", "date": "Jun 05, 2008", "message": "I wrote something similar on the \"vocal niche programmers\" that puts a different spin on it:\n\nhttp://www.pchristensen.com/blog/articles/hey-language-snobs-dont-pinch-pennies/\n\nI put niche languages (I called them \"snob\" languages) in the same category as Joel puts the Mac - a luxury good for a certain hobby.  In this case, the hobby is programming as a craft, abstraction, type systems, etc."}, {"author_name": "Federico", "gravatar_hash": "35bdded0ed436595945447a2484a77b0", "author_url": "http://blog.febuiles.com", "date": "Jun 05, 2008", "message": "I thought of arrays \"on-the-fly\" as in:\n\nfor (int i : {1,2,3}) or some_func_with_arrays({1,2,3})\n\nJeff/Joel: Will the podcast still be available through here your website's feed?  I prefer the \"warm start\" to IT Conversation's 1 min. of ads, although I guess I could just skip it..."}, {"author_name": "agnul", "gravatar_hash": "ee62f45441fbf8409dfd4adaa40a74aa", "author_url": null, "date": "Jun 06, 2008", "message": "Speaking of cheapo mp3 players, my Creative will let me browse through artists but choosing \"Joel &amp; Jeff\" will show an empty album list, so I can't pick a podcast for listening but I have to add \"all track from this artist\" to a playlist and then skip the ones I don't want. I think it could be fixed by adding an album title to the file tags..."}, {"author_name": "Anthony Williams", "gravatar_hash": "014ef33a9f0e7e3ac5a12e7446d2d619", "author_url": "http://www.justsoftwaresolutions.co.uk/blog/", "date": "Jun 06, 2008", "message": "I disagree with Joel on the use of exceptions: I think they make code clearer and easier to understand, and therefore *less* prone to bugs.\n\nI was going to write a long comment, but instead I wrote it up as a blog post:\n\nhttp://www.justsoftwaresolutions.co.uk/design/exceptions-make-for-elegant-code.html"}, {"author_name": "[ICR]", "gravatar_hash": "48a02e16370caadaedff78e2a94656ce", "author_url": "http://www.morethannothing.co.uk", "date": "Jun 06, 2008", "message": "Also, a terrible nitpick but for anything other than Microsoft products it's S-Q-L not Sequel."}, {"author_name": "Brent", "gravatar_hash": "9b905d6be69b0641d64d7cacc32d52d3", "author_url": null, "date": "Jun 06, 2008", "message": "Just noticed the logo on joelonsoftware.com as a complete logo. In my browser on my first visit here, the final w in stackoverflow was actually cut off so the logo appeared as stackoverflo. That is the explanation for my original comment. :)\n\nWhen first seeing this, I thought the logo was being clipped (which is was) but after a few seconds, I thought it was a brilliant joke to show an stack unable to hole the final w char.\n\nPerhaps something to try... or at least fix the page's design (I'm using FF2 on Mac OS X default minimum font size 10px). ctrl and mouse wheel scrolling reveals the full logo - much to my dissapointment ;-)."}, {"author_name": "Matt", "gravatar_hash": "cc942d2d8a74652acd9fe06fe9cc55fe", "author_url": null, "date": "Jun 06, 2008", "message": "I'm not so sure I'd trust a \"self-tuning\" database to create an index for me based on usage, mostly because indices aren't free.  An index can speed up queries, but the trade-off is that it slows down inserts and increases file size.  Maybe this is just indicative of my comfort level because I (think I) know how indices work, yet I trust the query optimizer to do its thing w/out really understanding it; which is to say: maybe a DB could automagically create appropriate indexes if I could somehow communicate my priorities vis a vis performance (e.g. OLTP vs. data warehouse).\n\nRegardless, I wear both a DBA hat and a Developer hat (among others) so joev's comment kind of resonated with me, especially this bit:\n\n\"Whenever I\u2019m working with other people on database-level stuff, I always complain about this. DBAs within hearing distance always roll their eyes, but forcing an application developer to tune their app to accommodate the low-level intricacies of the DB...\"\n\nI don't know about Oracle, but I think SQL Server does tend to hide/handle the \"low-level intricacies\" fairly well.  The disconnect between programmers and DBAs is all about modes of thought for attacking a problem.  Coding is inherently iterative and sequential: first you do this, then this, and then finally that.  SQL is all about sets and operations that act on whole classes of things (i.e. tables) instead of individual instances (i.e. rows).  DBAs may roll their eyes because they've seen some developers write staggeringly inefficient SQL, and developers get frustrated because it seems like DBAs want to arbitrarily make their lives harder (i.e. more work to code).\n\nThe ideal situation would be that the \"other people\" with whom joev is working on \"database-level stuff\" would include a DBA.  If there's one close enough to overhear and roll his eyes, he should probably just mosey on over and offer to help with the data access layer."}, {"author_name": "Tim", "gravatar_hash": "656056ac7ffbc97b499c02df119e2bab", "author_url": null, "date": "Jun 07, 2008", "message": "I did find it hilarious that after hearing Joel and Jeff discussing how they didn't want a theme tune, and how all those ads at the start of podcasts just put people off, etc...then the IT Conversations guys put a bunch of self-promo stuff at the start of the podcast, and a cheesy sax theme for good measure.  And then did the same at the end.  Maybe they could add a loud burst of static every now and then to really top the job off? :-)\n\nOther than that, I enjoy the podcasts - something to kill the time during my commute - I barely notice the drive when I have a stackoverflow podcast to listen to.  \n\n\nJeff really should learn C, though."}, {"author_name": "Vijay Santhanam", "gravatar_hash": "640b48a0bf5e3cc984bcef7b8db9a0dd", "author_url": "http://vijay.screamingpens.com", "date": "Jun 08, 2008", "message": "love the podcast, i enjoy it more than reading blog posts.\n\nat about 58:30 Joel complains about the var keyword in C# 3.0 - which I found amusing. C# is never going to go completely to a type inferred system (where types are always inferred from the use). the argument for this restriction is readability. restricting the \"var\" keyword to local scope means consumers of an public api won't see confusing things like void MyMethod(var b,var c) -- this is important because it's a REAL problem in completely inferred languages. You'll find haskell programmers need to use comments to supplement the function definitions, otherwise no one can use the confusing thing.\n\nTo say C# is behind python and ruby is a false comparison, since C# is statically typed and ruby/pyth are dynamic."}, {"author_name": "Anthony Williams", "gravatar_hash": "014ef33a9f0e7e3ac5a12e7446d2d619", "author_url": "http://www.justsoftwaresolutions.co.uk/blog/", "date": "Jun 09, 2008", "message": "Vijay's comment just reminded me about that part of the podcast. You may be interested to know that C++ is gaining type inference for variables in the C++0x standard (currently due 2009). You will be able to write\n\nauto x=foo(3,\"hello\");\n\nand the type of x will be deduced from the return type of foo. This is not dissimilar to the way that parameter types for function templates can be deduced today.\n\nSee http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1984.pdf\n\nfor the full details."}, {"author_name": "wds", "gravatar_hash": "01bb891a03442bf5494b7e35804c6dc1", "author_url": null, "date": "Jun 09, 2008", "message": "Regarding DSLs, I really liked the 3-parter Jeff Moser wrote somewhat on the subject. <a href=\"http://www.moserware.com/2008/04/towards-moores-law-software-part-1-of-3.html\" rel=\"nofollow\">Part 1 is here.</a> Well worth a read."}, {"author_name": "Roland Tepp", "gravatar_hash": "0f83be58c6c968f558b2cfda93183f28", "author_url": null, "date": "Jun 10, 2008", "message": "When Joel mentioned composing lists of lists, he was probably meaning something like this:\n\n  var list = {1, 2, {3.1, 3.2, 3.4}, new Four(), {5.1, {\"5.2.1\", \"5.2.2\"}, 5.3}, six};\n\nIn any case having ability to compose arbitrary lists of lists is basically an ability to describe data structures of arbitrary complexity, which is nothing more than description of a configuration data. Which is the simplest of the use cases for DSL's. In this sense - XML and JSON and YAML are all DSL's for storing configuration data.\n\nDSL's, as I've understood them an be just that or way much more, if need be.\n\nThe primary benefit of having DSL is to be able to define behavior of the domain area in terms of the domain itself, thus effectively making it possible for programmers and domain experts to \"speak the same language\".\n\nIn the most advanced cases - DSL's can be quite close full blown programming languages (e.g. I might be getting it wrong, but the FogCreek's Wasabi can also be called in some way, a DSL, since it has been designed and implemented to solve a particular problem domain)"}, {"author_name": "Casper Bang", "gravatar_hash": "b7377f539075c3f5503871c271020432", "author_url": null, "date": "Jun 10, 2008", "message": "With all respect, it's fine to be strongly opinionated but one should also know when to shut up, it really got annoying to listen to in the end I'm sorry to say.\n\n- \"Where's DSL's coming from, patterns people\"\n\nNo meta-programming comes from the other camp, those who like language oriented programming as oppose to API oriented programming. Big in this game is Martin Fowler, who also hosts a DSL podcast: http://www.thoughtworks.com/what-we-say/podcasts.html\n\n\"Is it coming from java\"\n\nHardly, that's why we have to many libraries/frameworks in Java which is very much API oriented programming (no properties, no events, no type inference, no closures etc.).\n\n\"Seems like they are using a programming language which doesn't have a good enough way to express trees as literals, which you can't in neither Java nor C#\"\n\nThat's actually all LINQ is about, a type-safe way of building tree literals and evaluating these at runtime.\n\n\"Can I create a list on the fly?\"\n\nC# allows instantiation and population in-line through collection/object initializes, which composes really well and is one of the pillars of LINQ.\n\n\"I was disappointed with LINQ, the syntax is backwards yada yada I don't buy it\"\n\nWell LINQ is not SQL, it is a general purpose query API with syntactical support, that just so happens to have a data provider layer which can talk to SQL databases. It allows for type-safety and code completion, which we have never had before and that's quite groundbreaking really.\n\n\"They have this concept of a variant... you can't use that as an argument to a function.... a lot becomes impossible for no reason\"\n\nNo it's not a variant (like you may know from VB6), it's just a placeholder for the actual type. If you could cross a stack frame boundary, you could no longer infer this at compile time and hence it would have to be determined dynamically through a VTABLE lookup at runtime.\n\n\"C# is not yet doing the dynamic thing\"\n\nNo, and it never will. C# is a static language and I just don't see how it makes sense to compare it to Python/Ruby which may throw a kin to MethodNotFound exceptions in your face at any given time because they are - dynamic."}, {"author_name": "Kerry Sainsbury", "gravatar_hash": "d90b921cc15d11964dba31ec4300ca7a", "author_url": null, "date": "Jun 10, 2008", "message": "Casper Bang: I too initially found the ignorance amusing, and then annoying.\n\nDo what I did -- unsubscribe!\n\nI feel better already. \n\nI've come to the website to leave feedback about why I left, but you've done a beautiful job, although I still confess I don't understand Joel's connection between a DSL and arrays."}, {"author_name": "Oliver", "gravatar_hash": "790077ceffa50ec803b187a6861d1837", "author_url": null, "date": "Jun 11, 2008", "message": "Hello,\n\nI was slightly annoyed about the way you criticised MySQL: why use FUD when there are real criticisms?\n\n1) a RDBMS (relational database management system) has the following features: ACID transactions, handling of larger-than-main-memory-datasets, a query optimiser, schema management, concurrency support\n\n2) mysql is often criticsed for not supporting atomicity, which I understand is nowadays possible with a very slow backend\n\n3) mysql is often criticised for its lack of standard SQL-92 language features and an effective query optimiser\n\n4) mysql is often criticised for lack of scaling (which I would claim is part of concurrency support, where the Isolation property is only concurrency control)\n\n5) you claim that there are hidden licensing costs associated with mysql; with mysql being GPL licensed, you should probably retract your statement; if you are after making your own product by building something incorporating mysql, then clearly you should be compensated for the value that you've added, but not for something that's otherwise available -- which is why you have to give money to the mysql company if you want to earn money by building something on top.\n\nPS: I understood your statement on threads &amp; processes to be \"we have processes, threads have no added utility over them\"; I disagree, because process context switches are expensive and thread context switches are much cheaper, thus giving you a structuring device.  SMP is also becoming more important with multicores, where threads are much cheaper than MPI.\n\nbest regards,\n\nOliver Seidel"}, {"author_name": "Colin Nicholls", "gravatar_hash": "a222a039d50d4d5c4197271f515cc5d2", "author_url": null, "date": "Jun 11, 2008", "message": "Please don't try to talk about Visual FoxPro.\n\n(Now you can go ahead and put me in the box you keep under the desk with everyone else who defends VFP. \n\nIt's just that everything you said about VFP was wrong. So please don't try.)"}, {"author_name": "Josh Kodroff", "gravatar_hash": "9e7ef08258f04dab37b43842d261aea8", "author_url": null, "date": "Jun 18, 2008", "message": "I believe the word you're looking for to describe the Ruby community is either \"partisan\".  Maybe even \"chauvanistic\", but I think that word more describes the fringes of the pro-*nix Slashdot community.\n\nhttp://en.wikipedia.org/wiki/Chauvanistic"}, {"author_name": "Tomasz Nazar", "gravatar_hash": "0626b60709d6a4d9fba00d26c0445256", "author_url": null, "date": "Jun 19, 2008", "message": "About passwords you Joel were asking: I use only Firefox internal password manager. Mostly I do remember most important passwords; for others (portals, blogs) I just use one simple pass ;)\nAnyway: I use Google Browser Sync for keeping bookmarks on different OSs and computers. It also HAS ability to keep all the passwords, but I don't like passwords being outside of my PC..\nSee you. T."}, {"author_name": "Jared", "gravatar_hash": "5ff1e1b35d1fc13baf08d807fb2097a7", "author_url": "http://www.updike.org/", "date": "Jun 20, 2008", "message": "Joel touched on Lisp/DSLs but I thought I'd a few links and thoughts.\n\nIn terms of a book to read about about Embedded Domain Specific Languages, there is Paul Graham's On Lisp (full book available as a free PDF download):\n\n  http://www.paulgraham.com/onlisp.html\n\nFunctional Programming languages are often touted as a way to allow you to create embedded domain specific languages as libraries, without forfeiting the full power of the host language (e.g. Lisp, Haskell):\nhttp://www.haskell.org/haskellwiki/Research_papers/Domain_specific_languages\n\nAn example is the library Parsec, for creating parsers (sort of like YACC or bison), fully and naturally embedded in Haskell. A huge advantage of using a general purpose programming language as the host for a DSL is that multiple DSLs can be combined within the same code. So for example you can write a parser as a first class citizen in that language, and then use the embedded document pretty printing language (which is actually just another library) to print out what you parsed in.\n\nHope that helps."}, {"author_name": "M-Tron", "gravatar_hash": "09cde5dd80d173aea916a5152470e417", "author_url": null, "date": "Jul 17, 2008", "message": "Hey-ho, someone at work mentioned this super duper podcast and thought I should jump on it. \n\nCriticism:\n\nI think almost all of the podcasts that I have listened to can be distilled to like half the time. You guys should raise the quality of this stuff. Almost borders on gossip for nerds rather than any insights, thoughts on new APIs, etc. Also, atwood seems to be very deferential to Spolsky. Cmon atwood grow a backbone ! And stop repeating everything spolsky says in a different form ! \n\n\n\"But its free !!\", doesnt work with linux, doesnt work here either :/"}]}