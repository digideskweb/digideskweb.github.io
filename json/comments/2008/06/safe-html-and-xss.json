{"response": [{"author_name": "Stephen Hendry", "gravatar_hash": "1c6a135ac2d7478623ccbb3bd4e3cd79", "author_url": "http://stephenhendry.net", "date": "Jun 20, 2008", "message": "Never seen RefactorMyCode.com. Looks a good idea."}, {"author_name": "agnul", "gravatar_hash": "ee62f45441fbf8409dfd4adaa40a74aa", "author_url": null, "date": "Jun 20, 2008", "message": "Not sure this applies to the Stack Overflow audience, but whenever I see a textarea that allows HTML I think unclosed tags and broken layout waaaaay before XSS :-)"}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 20, 2008", "message": "agnul -- yeah, that too!"}, {"author_name": "hhrvoje", "gravatar_hash": "a52c4e6777b29166d6bc0fa8d678126a", "author_url": null, "date": "Jun 20, 2008", "message": "As I can see:\n\nwill pass sanitization. Don't know if someone could inject harmful js code, but it's thing to consider.\nI'm not very good with regex, so I can't refactor your code :)\n\nAlso, thanx for refactormycode site, it's great!"}, {"author_name": "hhrvoje", "gravatar_hash": "a52c4e6777b29166d6bc0fa8d678126a", "author_url": null, "date": "Jun 20, 2008", "message": "ups, my code in comment was sanitized by blog comment engine :)\n\nI wrote img tag with onclick event that execute some js code."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 20, 2008", "message": "Ironically, you WOULD be able to write about this on Stack Overflow using the WMD editor!\n\nSimply indent 4 characters (or use the toolbar \"code\" button to indent a block all at once) and your evil XSS example be sanitized and displayed as is.\n\n:)"}, {"author_name": "sadie", "gravatar_hash": "85da34890f23a1fbd629bacc8b6bb81a", "author_url": null, "date": "Jun 20, 2008", "message": "I've faced a similar problem, and come to a solution that some would find overly brutal. We convert all user-submitted HTML into something that more closely resembles BBCode, and allows only a very small subset of tags and configurations. This is then converted back to HTML when it needs to be displayed.\n\nUnusually for such converters, instead of a sequence of regexs I use a parser style converter: top to bottom, one character at a time, keeping track of the current state and style. I've found this more reliable in the long run, though it did take more brain power to write.\n\nIt has had a few issues (I had to add things like tables, and some code to handle the crimes against unicode that happened when people pasted content in from Word), but by and large it's successful, and has worked with the output of several different WYSIWYG editors. I could give you a copy of the code (in Java) if you wish?"}, {"author_name": "Mark Tiefenbruck", "gravatar_hash": "5022e8f0a0c5572cc979ccb74bbf753f", "author_url": "http://mark.tiefenbruck.org/", "date": "Jun 20, 2008", "message": "A site I work on uses a full parser/lexer that knows which elements require end tags, which attributes can appear on each element, and which ones we allow. However, the site has much more sophisticated needs: it's a math messageboard, so in addition to html formatting and bbcode (some users just kept writing it, even though it didn't work), we also have syntax for including special symbols and LaTeX. Also, we needed a real parser because symbols like  have very important uses when math is the topic. I suspect a coding website would have the same issues.\n\nHere's where we got our list of elements and attributes:\n\n    http://www.w3.org/TR/1999/REC-html401-19991224/index/elements.html\n    http://www.w3.org/TR/1999/REC-html401-19991224/index/attributes.html"}, {"author_name": "Tedkees", "gravatar_hash": "6fbbb03d57d4b5d7501326f06e252942", "author_url": "http://www.tedkees.net", "date": "Jun 20, 2008", "message": "Maybe this is a slight side-step from the issue at hand, but would it be possible to just keep writing new testcases (eg. malformed input you find somewhere on the 'net) for this specific method and use it in your automated test sequence?\nIf you do that, you're sort of prepared for the future as far as forgetting to cover a hole which you discover later on.\n\nBesides, it's a nice exercise to write this code yourself, but isn't this a well-known problem across the 'net? I bet there's a lot of implementations already. Did you find any existing samples, maybe worth linking in your post?"}, {"author_name": "Ilia Jerebtsov", "gravatar_hash": "87db8d58a83b15d47b0ff00425611902", "author_url": "http://www.sunstormlabs.net", "date": "Jun 20, 2008", "message": "Why not just use <a href=\"http://htmlpurifier.org/\" rel=\"nofollow\">an existing component</a>?"}, {"author_name": "Ilia Jerebtsov", "gravatar_hash": "87db8d58a83b15d47b0ff00425611902", "author_url": "http://www.sunstormlabs.net", "date": "Jun 20, 2008", "message": "Er, my bad, I forgot this would be made in .NET. Still, I'm sure there are good HTML sanitation components available for .NET as well. Surely you're not the first to have this problem on the entire internet."}, {"author_name": "Craig", "gravatar_hash": "0f646e0ae274f9795ce8e95c120bddf8", "author_url": null, "date": "Jun 20, 2008", "message": "Bahh, text comments who need 'em anyway!? We'll just upload \u201cwohv\u201d files. =)"}, {"author_name": "Alex", "gravatar_hash": "3036efe509c160297a9b6f1a3e543bf8", "author_url": null, "date": "Jun 20, 2008", "message": "You need a real parser to process html, regexps are just not enough. pre tags can be nested, they can be inside string attributes of other tags, trere can be html comments... It's a no-win situation."}, {"author_name": "John", "gravatar_hash": "d0b76ae7bf261316683cad31ba0bad91", "author_url": null, "date": "Jun 20, 2008", "message": "How would this work with code samples of HTML or Javascript etc.?"}, {"author_name": "fm", "gravatar_hash": "597419a0fc886314d25bf0d350f88cf8", "author_url": null, "date": "Jun 20, 2008", "message": "Jeff, what you are trying to do is terrible from security point of view, blacklisting doesn't work. \n\nSecure HTML rendering is a huge challenge. I think so far the best approach is Anti-Samy project from OWASP but has not been ported to .NET yet. \n\nAlso there are other problems with HTML support such as who wants 20px Pink fonts heading which says \"Quik answers plz\" ?\n\nMy recommendation would be simply whitelisting supported HTML tags. and HTMLencode the rest. Even better use MS Anti-XSS Libary foor the rest.\n\nA more secure system with less more. From programming point of view \n* Encode all (anti-xss or htmlencode)\n* Reverse supported whitelisted tags back to HTML form\n* Close all open\n\nThat's it.\n\nfinal note, there are other security issues about HTML support without JS such as CSS overlay attacks."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 20, 2008", "message": "> My recommendation would be simply whitelisting supported HTML tags. \n\nErr.. did you even look at the code? This is exactly what it does."}, {"author_name": "Bartek", "gravatar_hash": "ef9f83fbbceaeb8fa4e358bfb634a217", "author_url": "http://www.weselinka.pl", "date": "Jun 20, 2008", "message": "As a side note, maybe it would be better to:\n\n1. save the original content to the DB _AND_\n2. prepare and save a cached, sanitized (maybe even \"HTMLed\") version to the DB too (ready to include on the page).\n\nThis way, if one day you will change your sanitization method or display procedures you will be able to this easily. \n\nPlus, in case someone would like to edit his/her comment/entry he/she will get exactly the same text they entered. \n\nThis is what various CMSes, including Drupal, do.\n\nRegards,\nBartek"}, {"author_name": "Huppie", "gravatar_hash": "34d96bbc3fd8768f39b414f28d52ce87", "author_url": null, "date": "Jun 20, 2008", "message": "Since the current code uses a simple whitelist to remove certain tags from the user's input I wonder how you're going to prevent the page's layout from being messed up.\n\nFor instance if my malicious paragraph-open-tag-with-onmouseover-javascript has been removed the close-tag may close some other paragraph messing up the page's layout.\n\nMy first thought was \"There must be hundreds of sites having this feature... isn't there a .NET component that does this for you?\". A quick Google-search ended up with nothing (I did find a very nice PHP-component which I see Ilia is referring too as well.) but maybe I'm just searching with the wrong name."}, {"author_name": "Erlend", "gravatar_hash": "cf4621433dfa81bba4712eed74acbebb", "author_url": null, "date": "Jun 20, 2008", "message": "You should also be aware that there is just an insane amount og ways to trigger javascript code. For instance , and IE even allows js in CSS expressions. \n\nPersonally I think I'd just stick with markdown :)\n\n-Erlend"}, {"author_name": "fm", "gravatar_hash": "597419a0fc886314d25bf0d350f88cf8", "author_url": null, "date": "Jun 20, 2008", "message": "&gt; Err.. did you even look at the code? This is exactly what it does.\n\nAhhh, sorry I took a fast look at it, thought it was black listing, based on the regex (obviously didn't read the inside and though you blacklisted certain tags). My bad. I think current problem with the code is not whitelisting attributes such as src etc. which someone else added in there in the comments. You don't want to have something like style=\"\" or onmouseover=\"\" \n\nAnd also there is another question, are you gonna accept external images or not. There is no big risk in there but there are known problems about putting external images."}, {"author_name": "Erlend", "gravatar_hash": "cf4621433dfa81bba4712eed74acbebb", "author_url": null, "date": "Jun 20, 2008", "message": "Uh, that was supposed to be [img src=\"javascript:...\" /] :)"}, {"author_name": "John Fraser", "gravatar_hash": "a6bfbfb00a776dcfb59ab291cc79173c", "author_url": "http://wmd-editor.com/", "date": "Jun 20, 2008", "message": "Hi Jeff,\n\nThis isn't code you want to write yourself: browsers have such lenient parsers that it's a huge amount of work to catch all the malicious input they'll happily render.  Take a look at http://ha.ckers.org/xss.html for some devious examples.\n\nTo sanitize HTML you pretty much have to write a serious, browser-class HTML parser. Definitely borrow; don't roll your own.\n\n(And you shouldn't trust my code to sanitize code blocks, since it's running on the client.)\n\nJohn Fraser\nThe WMD Guy"}, {"author_name": "John Fraser", "gravatar_hash": "a6bfbfb00a776dcfb59ab291cc79173c", "author_url": "http://wmd-editor.com/", "date": "Jun 20, 2008", "message": "Oops, sorry: looks like you already linked up that page, and spotted untrusted-client problem.  Reading is hard."}, {"author_name": "DanMulvey", "gravatar_hash": "a137b9c3f8c772785c60cb8d116b5b44", "author_url": null, "date": "Jun 20, 2008", "message": "Hey Jeff, thanks a lot for that RefactorMyCode site!"}, {"author_name": "Otto", "gravatar_hash": "435be4cef46ad735c93a4c6bc162b3c3", "author_url": "http://ottoradke.com", "date": "Jun 20, 2008", "message": "Jeff,\n\nWhen you first mentioned Markdown as the markup you'll be using, I wondered how you were going to prevent XSS.  I'm working on a project and ran into many of the issues you're talking about right now.\n\nThe best method that I found for cleaning HTML while allowing a small subset of HTML was a HtmlScrubber class that Rob Conery refactored (for SubSonic Forums) originally part of Community Server.  Here's a link to the class:  http://code.google.com/p/subsonicforums/source/browse/trunk/SubSonic.Forums.Data/HtmlScrubber.cs?r=61\n\nMy method for cleaning input was to get the input -&gt; HtmlScurbber -&gt; Markdown.net -&gt; db.\n\nBased on my early testing, there are just a few things the HtmlScrubber cleans that have side affects on Markdown.  The biggest being the way Markdown likes to use quotes for hyperlink titles.  If you leave the scrubber as is, the quotes won't work, but you can use parens instead of quotes.\n\nWhen you have a solution in place, I'd love to read more about it.\n\nOtto"}, {"author_name": "Braden", "gravatar_hash": "95a54632f5fb11795c3f384d7acea62b", "author_url": "http://bluej100.blogspot.com", "date": "Jun 20, 2008", "message": "Sorry, I e-mailed you after reading your tweet before I saw this. To repeat myself, <a href=\"http://htmlpurifier.org\" rel=\"nofollow\">HTML Purifier</a> owns--say what you will about PHP, but <a href=\"http://shiflett.org/blog/2007/dec/php-advent-calendar-2007\" rel=\"nofollow\">its elites</a> are paving the way in web security.\n\nAs John Fraser mentioned, regexes aren't going to cut it: check out the <a href=\"http://ha.ckers.org/xss.html\" rel=\"nofollow\">ha.ckers.org XSS cheatsheet</a> for an idea of how difficult this is. The only way to stop things like &lt;DIV STYLE=\"background-image: url(javascript:alert('XSS'))\"&gt; is a robust whitelist parser that rebuilds what it understands from scratch."}, {"author_name": "Naim Gozere", "gravatar_hash": "4acd21acc7b1f605466f2f48189a7177", "author_url": null, "date": "Jun 20, 2008", "message": "On my site, I run an actual HTML parser on the input. Any events it receives are processed to include only accepted elements and attributes -- for example, the &lt;img&gt; element will only have its \"src\" and \"alt\" attributes preserved, with all others discarded. Although it's trivially more CPU time server-side, I think this is an acceptable trade-off for properly sterilized input."}, {"author_name": "John Fraser", "gravatar_hash": "a6bfbfb00a776dcfb59ab291cc79173c", "author_url": "http://wmd-editor.com/", "date": "Jun 20, 2008", "message": "Hi Otto,\n \n&gt; input -&gt; HtmlScurbber -&gt; Markdown.net -&gt; db.\n\nYou might need to run HtmlScrubber after Markdown.net.  Most Markdown implementations will blithely accept javascript: urls (with a little character encoding), and I don't know that HtmlScrubber would catch Markdown-style links.  Email me and I'll send you a test case. (my first name [at] attacklab [dot] net)"}, {"author_name": "Stefan Ciobaca", "gravatar_hash": "82e8780cc5e4d583081079cb8c120bbc", "author_url": null, "date": "Jun 20, 2008", "message": "This is exactly the kind of code a person who doesn't know C writes. Terrible coding style, from someone who should know better.\n\nQuick now: what happens if I enter \"%pre%0malicios code here\"\n\nI hope the sanitizer doesn't mess up what I wrote."}, {"author_name": "Stefan Ciobaca", "gravatar_hash": "82e8780cc5e4d583081079cb8c120bbc", "author_url": null, "date": "Jun 20, 2008", "message": "%pre%0 pretagstart malicios code here pretagend"}, {"author_name": "Stefan Ciobaca", "gravatar_hash": "82e8780cc5e4d583081079cb8c120bbc", "author_url": null, "date": "Jun 20, 2008", "message": "And I can't believe how many folks at refactormycode are just blindly applying what they've read in the latest book on how to make bad code look good.\n\nBtw, the wrong solution to the (huge) security issue I mentioned earlier is to scan the input for %pre%s..."}, {"author_name": "Stefan Ciobaca", "gravatar_hash": "82e8780cc5e4d583081079cb8c120bbc", "author_url": null, "date": "Jun 20, 2008", "message": "People have learned over time not to implement their own cryptographic encryption functions (because they are broken by design). Why do people insist on cleaning user input on their own?"}, {"author_name": "Tim Millican", "gravatar_hash": "9a5413c08480420ae2f8fc181cf80867", "author_url": null, "date": "Jun 20, 2008", "message": "I really can't wait for this site to be up! It will be really cool."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 20, 2008", "message": "Stefan, as it turns out, I didn't need to take out the pre tag. And I noted above, the &lt;pre&gt; has to be sanitized, too.. see the new code sample at the bottom of the page..\n\nhttp://refactormycode.com/codes/333-sanitize-html"}, {"author_name": "Rogier van Etten", "gravatar_hash": "f0eb68f57b228044028aa9eb0dfd3f39", "author_url": null, "date": "Jun 20, 2008", "message": "Why support HTML at all? Official spec be damned if it introduces security problems but doesn't add any real, useful functionality. By \"add useful functionality\", I mean: with your sanitizer, you're basically distilling HTML down to the point where you can do whatever \"pure\" Markdown can, and not much more (images, headers, that sorta thing). At that point you have to ask yourself, what real value does allowing HTML add to the equation? You're already diluting the standard by filtering the HTML, so why not go all the way by disabling *any* XHTML, and get rid of a potential security problem at the same time?\n\nBesides, by forcing people to use Markdown, you'll give programmers a new language to learn. And we all know programmers like that more than getting actual work done."}, {"author_name": "Sandy McArtthur", "gravatar_hash": "f9f8f67f20c3b28b28633be1ab11ebc9", "author_url": "http://Sandy.McArthur.org", "date": "Jun 20, 2008", "message": "This won't work for Stack Overflow as you aren't using Java but in the past I've accepted \"sloppy\" HTML input and converted it into a XML DOM before processing it. I used the NekoHTML http://nekohtml.sf.net/ plugin for Apache's Xereces to build the DOM. You could then save the normalized and sanatized DOM into well formed html."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 20, 2008", "message": "> Why support HTML at all? \n\nI agree, it would be MUCH easier if the output was Markdown-only. Unfortunately, since \n\n1. Markdown supports mixing HTML, per the spec\n2. the WMD control will happily take HTML and put it in the preview\n\nI figured we might as well give it a go. At any rate, I am learning a LOT about XSS, which is a good thing. Considering XSS is the #1 class of vulnerabilities in software right now..\n\nhttp://en.wikipedia.org/wiki/Cross-site_scripting"}, {"author_name": "Zooba", "gravatar_hash": "d875885cdc24d5d9864943acb493b2d4", "author_url": "http://www.byteclub.net/blog/zooba", "date": "Jun 21, 2008", "message": "Whatever you go with, please make sure that unrecognised/bad tags get passed through as plain text. That way people who use angle brackets in their text don't end up with huge spaces. That always annoys me and I end up having to post a follow-up comment with an explanation of what is missing.\n\n(Want Gravatar, but can not have... apparently someone on Wordpress has taken my name :( )"}, {"author_name": "vts", "gravatar_hash": "d3eb83a18fdcc103c5ec9b6d7cc7a5d8", "author_url": null, "date": "Jun 22, 2008", "message": "I have run into this problem many times before, and I have long come to the conclusion that it is virtually impossible to sanitize HTML input. As many people here have pointed out, there is no realistic way of preventing all malicious input short of writing your own HTML parser (good luck with that).\n\nThis is the reason why I always use BBCode instead of HTML when some HTML functionality is needed for the general public. If the Markdown syntax does not offer an HTML-less syntax, then it is simply flawed by design and should not be used."}, {"author_name": "Ian Anderson", "gravatar_hash": "60b1c7dc18e08e1a16f313354814744f", "author_url": "http://thefirstpost.co.uk", "date": "Jun 22, 2008", "message": "I don't think you should be storing HTML or JS in the database at all; if you escape all characters to their html-safe equivalents (e.g. left angel bracket as ampersand lt semicolon), then the code should display as text when it is output. There are no reasons why people should be inserting live HTML or javascript into your database, in my opinion. Or you could escape it on output. No XSS then.\nHope this helps!"}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 22, 2008", "message": "> There are no reasons why people should be inserting live HTML or javascript into your database, in my opinion\n\nRemember, we're like Wikipedia -- we allow editing. Thus, we are storing two representations of every edit:\n\n1) the pre-rendered output \n2) the editable content"}, {"author_name": "Mark Quinn", "gravatar_hash": "efb855f5e97a05a071f827fac09090b8", "author_url": null, "date": "Jun 23, 2008", "message": "Just ensure that you take a whitelist approach whenever doing this sort of sanitising of any type of externally-supplied input. As can be seen in the xss cheat-sheet to which you link, there are too many ways to get round blacklist implementations. \n\nAdditionally whitelists means that you know exactly what types of tags and data you accept and need to style; More importantly: you are much more protected from new standard, changes and exploits.\n\n\n... And of course, when writing the data to your db, make sure you use parameterized (prepared) statements."}, {"author_name": "[ICR]", "gravatar_hash": "48a02e16370caadaedff78e2a94656ce", "author_url": "http://www.morethannothing.co.uk", "date": "Jun 23, 2008", "message": "Haven't you learnt from all the trouble people have with writing generics on your blog that simply removing suspected tags isn't a good idea? Yes you can do it easier in code blocks, but I'm willing to bet you'll still end up eating people's content simply because it's between angle brackets. Just escape them.\n\nThere are a few good .NET HTML parsers on the web, I'd recommend using one of those over regex's."}, {"author_name": "Huppie", "gravatar_hash": "34d96bbc3fd8768f39b414f28d52ce87", "author_url": null, "date": "Jun 23, 2008", "message": "[ICR]\n1. Removing the tags is no problem since the original input is saved in the database as well (see Jeff's comment two post above yours.\n2. Please enlighten us, my first guess was there should be a few good HTML parsers for .NET but I haven't found any good ones yet. Can you provide hyperlinks to 'a few good .NET HTML parsers'?"}, {"author_name": "[ICR]", "gravatar_hash": "48a02e16370caadaedff78e2a94656ce", "author_url": "http://www.morethannothing.co.uk", "date": "Jun 24, 2008", "message": "Okay, maybe I was a little optimistic in saying \"good\", but http://www.majestic12.co.uk/projects/html_parser.php is okay, I've heard http://www.chilkatsoft.com/HtmlToXmlDotNet.asp works pretty well though annoyingly I can't find the other I've used before."}, {"author_name": "Craig", "gravatar_hash": "0f646e0ae274f9795ce8e95c120bddf8", "author_url": null, "date": "Jun 24, 2008", "message": "I've used <a href=\"http://www.codeplex.com/htmlagilitypack\" rel=\"nofollow\">Html Agility Pack</a> to do handle \"messy/invalid html\" parsing. You'd still need to do the sanitation but at least you'll get a DOM to step through."}, {"author_name": "Josh Stodola", "gravatar_hash": "ac11bb0472c37bf41ca166ec849d3a02", "author_url": "http://blog.josh420.com", "date": "Jun 24, 2008", "message": "Best way to do this is to HTML encode the entire message, then un-encode the tags in the whitelist (making sure a closing element is present, the number of closing elements equals the number of opening elements, etc).  This way if they happen to accidentally screw up the tags, you the administrator will notice it and be able to correct it for them (or they could correct it, if comments have edit capabilities).  Strip ANYTHING out of the users input and you have FAILED."}, {"author_name": "wickethewok", "gravatar_hash": "35bba4c87c6bd816abf5b0259c33b6aa", "author_url": "http://completement.wordpress.com/", "date": "Sep 02, 2008", "message": "This what I like about PHP.  This would simply be two calls to the built-in functions strip_tags() and then htmlspecialchars() .  Surely there are existing C# libraries out in the open-source community that already have this functionality?"}, {"author_name": "Jake Scott", "gravatar_hash": "b25978089e5dd3c013ea755018d51225", "author_url": null, "date": "Feb 24, 2009", "message": "What happened to the code you posted its no longer on Refactor my code...?"}, {"author_name": "Charles", "gravatar_hash": "c13b17ba0d05ceb187f58d33c56a0b3a", "author_url": null, "date": "Feb 01, 2010", "message": "The Anti-Sammy project was ported to .NET - what do you all think about using it?  I'm trying to weigh my options.\n\nhttp://code.google.com/p/owaspantisamy/source/browse/trunk/dotNet/current/source/owaspantisamy/"}, {"author_name": "Gaurav", "gravatar_hash": "b1b70bc76a2790fd58281097f0cc245c", "author_url": "http://huntshire.com", "date": "Jan 30, 2013", "message": "http://refactormycode.com/ is under maintainance :)"}]}