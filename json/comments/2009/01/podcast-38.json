{"response": [{"author_name": "Michael Buckbee", "gravatar_hash": "6b2f1516abfdcb7aef33f4ad2a2e8c05", "author_url": "http://www.buzzwordcompliant.net", "date": "Jan 21, 2009", "message": "For the far future expires+cache control header working with images issue, Ruby on Rails (and some other frameworks) append the image with a question mark and the hash of the image files last-modified time. \n\nAlso, I was curious if you'd done tests with the packaging of your js includes versus having them hosted on Google?\n\nI would think the real benefit of having Google host them is that new users are quite likely to already have them loaded already so overall they have nothing new to download from you.\n\nThanks,\n\nMike"}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2009", "message": "> I would think the real benefit of having Google host them is that new users are quite likely to already have them loaded already so overall they have nothing new to download from you.\n\nThis is covered in the podcast, but we bundle JQuery with a a number of related libraries and scripts -- they're packaged into a larger \"core\" file of javascript we use almost everywhere on the site.\n\nSo it'd be an *additional* HTTP request on every page to get JQuery from Google, which we think is a net loss for us."}, {"author_name": "Dave Ray", "gravatar_hash": "8afe5283fb2d5f0a817c9c9ea4fa925e", "author_url": "http://blog.darevay.com", "date": "Jan 21, 2009", "message": "Speaking of unit tests. In a previous podcast you mentioned breaking the C++ tag several times. Did that get a unit test eventually? Seems like a prime candidate :)"}, {"author_name": "Bremen", "gravatar_hash": "9a45de8df0c5c3f6e137c785e71557b8", "author_url": null, "date": "Jan 22, 2009", "message": "Oh man I'm so behind on podcasts..at least you guys are on time with releasing them. Need to get to the last couple, having withdrawals from my favorite bickering couple."}, {"author_name": "Gishu", "gravatar_hash": "69772f0246d5013d72703967b8761e89", "author_url": "http://madcoderspeak.blogspot.com", "date": "Jan 22, 2009", "message": "Don't really agree with Joel's dissection of the SOLID principles... although I use them more as 'guidelines' rather than laws. A quick post-design checklist to crosscheck with.\n\nThe example for Single responsibility Principle (http://www.objectmentor.com/resources/articles/srp.pdf) was 'way off the deep end' IMHO. What I understood it was if you have a single class that handles tax computation rules and report formatting, then you should look at splitting them into 2 classes, each of which that handles one responsibility. Combining responsibilities soon leads to code for various responsibilities being intertwined with time.. hard to maintain. The idea being you don't want to break something in report formatting, when you change a tax computation rule or vice versa. \nSimilarly the idea of ISP (http://www.objectmentor.com/resources/articles/isp.pdf) is to not have classes that expose fat interfaces. e.g. don't make clientA using simpleMath members/funcs to recompile because you need to make a change to the signature of a Trignometry member of the GiantMath class for clientB. If you made GiantMath expose ISimpleMath and ITrignometry, clientA doesn't need to recompile due to a change in an interface it doesn't care about.\nWriting an interface as a wrapper for every class isn't what is being proposed. Create an interface if you need decoupling.. Agile or any related term is no substitute for good judgment. \nAnyways that's what I read Bob Martin's APPnP book as..."}, {"author_name": "Gishu", "gravatar_hash": "69772f0246d5013d72703967b8761e89", "author_url": "http://madcoderspeak.blogspot.com", "date": "Jan 22, 2009", "message": "Also writing code without unit tests is ALWAYS faster than writing code with tests. The question is can you sustain that pace going forward... The tests give you a safety net for future changes. Of course it is time invested upfront for future gain.. So you need to do a cost to benefit analysis and be smart about the tests your write. \n\nThere.. 'Someone is no longer WRONG on the internet' ;)"}, {"author_name": "kip", "gravatar_hash": "c621039e41aef415ad25054da3bf3f9a", "author_url": "http://www.vacant-nebula.com", "date": "Jan 22, 2009", "message": "As far as auto-versioning for cached files, what I've been doing on my own website is providing it to the user as something like style.timestamp.css.  On the server, URL rewriting makes it ignore the \".timestamp\" part, but to the client it looks like a new CSS file is being used.\n\nI asked a question about this a while back, which I really asked mainly as a way to share my own tip:\nhttp://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files\n\nThere was discussion as to whether browsers will cache files that have query strings."}, {"author_name": "Jack M.", "gravatar_hash": "9ecd2f59de5e03ba481723637fc74fad", "author_url": null, "date": "Jan 22, 2009", "message": "One way to reduce DNS downtime on the stackoverflow switch is to create a dummy DNS for people to go to.  If your cookies work for *.stackoverflow.com, you can create a newloc.stackoverflow.com which no one will have cached and points at the new servers.\nSo the process looks like this:\n\n1.  You bring down the existing servers.\n2.  Transfer your database, etc, get the new servers up and running.\n3.  Point stackoverflow.com to the new servers.\n4.  Bring up the old servers and all they do is a redirect to newloc.stackoverflow.com.\n5.  After a few days, bring down the old servers and redirect newloc.stackoverflow.com to stackoverflow.com (just in case somebody bookmark'ed newloc.*).\n\nThis solution is pretty elegant and doesn't require too much programming just for the change-over.\n\n"}, {"author_name": "Jim Buck", "gravatar_hash": "aeff0099743dd003da31e22fc33204e3", "author_url": "http://www.twitchythumbs.com", "date": "Jan 22, 2009", "message": "Did Joel ever re-find that source file online that, through syntax funkery, works in many different computer languages? It sounded cool."}, {"author_name": "Alan Szlosek", "gravatar_hash": "791e9e81087c817296fd3b98e4159af0", "author_url": "http://greaterscope.net", "date": "Jan 22, 2009", "message": "This podcast comes with jokes! It's amazing how often Joel mutters something while Jeff is talking (something about joints, and not doing real work ...)\n\nThis podcast is great, and that's no joke. Been listening since day 1."}, {"author_name": "Stephen", "gravatar_hash": "3454ee98fcec27e45888f291d90539da", "author_url": null, "date": "Jan 22, 2009", "message": "Interesting you talk about the .NET port of YUI compressor, I had a look at it recently but got really put off by the amatuerness of it.. comments like \"Lolz blush\" or having 'bool' values like \"Yep!\" \"Yeah\" etc.. it just worried me about how seriously the code was written.."}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://msmvps.com/jon.skeet", "date": "Jan 22, 2009", "message": "I'm concerned about part of the implementation of the \"what's been happening recently that I might be interested in\" (as opposed to \"recent acivity\") feature. Don't get me wrong, the tab sounds great. But there was a bit about popping up an orange bar if the user hasn't been to Stack Overflow for a day or so.\n\nIs it really worth spending time on this notification which will only affect sickos and freaks?\n\nNo time for more - haven't checked questions in a few minutes.\n\nJon"}, {"author_name": "Perttu", "gravatar_hash": "c31b822dc1c8097d66be0334fafbd4c2", "author_url": null, "date": "Jan 22, 2009", "message": "I strongly agree with Gishu about Joel's misguided interpretation of Robert C Martin's SOLID principles. Uncle Bob is certainly no \"architecture astronaut\". Just read his \"Agile PPP\" book or the newer \"Clean Code\". \n\nToward the end of this podcast it sounded almost like Joel &amp; Jeff were actually promoting quick and dirty programming with remarks like \"quality doesn't matter\" or something like that. I know you guys were only trying to provoke a reaction, so I'll forgive you this time :-)"}, {"author_name": "developingchris", "gravatar_hash": "1ce04312daddc2060e9f6d87805cad2a", "author_url": null, "date": "Jan 22, 2009", "message": "I believe joel's assertion about the css is correct, although it has a real reason. E-Tags, specifically the default implementation for iis, which only resets the etags when the server is restarted. And the E-tag is taken higher in priority to the expiration."}, {"author_name": "Andy", "gravatar_hash": "3ec30f7629f101238ef76261d913fdc1", "author_url": null, "date": "Jan 22, 2009", "message": "Agree with Gishu and Perttu, sounds like Jeff and Joel are actually promoting the 'cowboy coder' development practice. I hope it's just a misinterpretation of the principles Uncle Bob was discussing. For example, the S of SOLID: Single Responsibility Principle...do we take have to take it to the ultimate extreme and say this means that a class can only have one method, after all, that is surely the closest we can get to a \"single responsibility\"?"}, {"author_name": "Peterpunk", "gravatar_hash": "5198744cd329b6dfdb9e39b4f9794cd1", "author_url": "http://polsinelli.wordpress.com", "date": "Jan 22, 2009", "message": "Joel seems is the first I know to has the courage to say \u201cthe king is naked\u201d and openly dispute the usefulness of many methodologies and bureaucratic practices (so far from algorithmic problems) that are so popular today (in conferences); this allergy to rhetoric which so many of us real developers \u201cfeel\u201d, but are unable to express eloquently\u2026 thanks!"}, {"author_name": "Justin Adler (aka Pure Krome)", "gravatar_hash": "8b9a3d325d32a1dfed22022800e07a3f", "author_url": null, "date": "Jan 22, 2009", "message": "Hi Jeff/Joel:\n\n\"We had bad luck with the .NET port of this tool (YUICompressor.NET).\"\n\ni'm the guy that made that port on that codeplex site. Is there any chance you can explain what happened and why you guys had bad luck with it? A number of people that have contacted me via email have had great success with it so I'm always keen to see how I can bug fix / improve it.\n\nThere should be NO REASON for anyone to install Java onto their build machines IMO :(\n\nPlease can you guys elaborate what was wrong. \n\ncheers!"}, {"author_name": "Callum", "gravatar_hash": "aacc05833cafcb1df693ed5a937d2dda", "author_url": null, "date": "Jan 22, 2009", "message": "The name of a program which can work in many different languages is called a polyglot. See http://en.wikipedia.org/wiki/Polyglot_(computing)"}, {"author_name": "Nick Berardi", "gravatar_hash": "906432cc1eb080f5e5343438f654189e", "author_url": "http://www.coderjournal.com", "date": "Jan 22, 2009", "message": "Hi Jeff &amp; Joel,\n\nNot to step all over Justin, because I think he has made some great steps with the YUICompressor.NET.  But I have created a MSBuild wrapper around the Java YUICompressor incase you are interested.\n\nhttp://www.coderjournal.com/2008/05/how-to-create-a-yui-compressor-msbuild-task/"}, {"author_name": "Chris", "gravatar_hash": "b6b87721c444078a99633d6ed9352cec", "author_url": null, "date": "Jan 22, 2009", "message": "I don't think Jeff and Joel were promoting 'cowboy coder' development practice.  It seems like what Joel was advocating was more in the way of 'just in time' programming.  Rather than spending a lot of time and effort coding defensively in case you need to change some piece of code, just wait until you need to change the code and deal with the problem at that time.  \n\nIf anything, it seems like SOLID is a case of premature optimization: optimizing a codebase for changes before changes are actually necessary."}, {"author_name": "mgb", "gravatar_hash": "7010f170ec917b56e173f3978c459e0e", "author_url": null, "date": "Jan 22, 2009", "message": "Unit tests are a waste when:\nThey are written by the same programmer or even the same team that write the code - unless your unit tests are createdby a cleanroom team, they do not test the interface.\n\nYou only test the obvious,a file open unit test for when the file doesn't exist is a waste of time. How does anyone unit test the 'turkish keyboard' problem.\n\nYou skip unit testing the gui because it's too hard.\n\nThey are useful for testing things like maths libraries when the output for a given input is unambiguous"}, {"author_name": "Euro", "gravatar_hash": "a905a92a336eaea1b936c100ec49e229", "author_url": "http://stackoverflow.com/users/2230", "date": "Jan 22, 2009", "message": "About the database transfer: \nI'm not familiar with the details because I haven't done this myself (we have smarter people than me to do these things), but I'm pretty sure that you can: a) do a full backup of the database; b) restore it in the new server c) stop the database and detach it from the server; d) copy over just the transaction log files (which should be pretty slim); e) attach them to the new server f) fire it up and you're set. Or something like that.\nI'm sure that if you ask  Brent Ozar, he knows how to do this stuff in his sleep, and I bet he would be happy to help.\nAt least I think I'm right. I hope I'm not making a fool of myself (at least I can't be downvoted here :-) )"}, {"author_name": "Perttu", "gravatar_hash": "c31b822dc1c8097d66be0334fafbd4c2", "author_url": null, "date": "Jan 22, 2009", "message": "Chris: I have seen a lot of codebases without unit tests in place as well as a few with them. Based on my experience I'll have to agree with the Agile folks when they say that codebases with good test coverage (&gt;= 80%) are much safer and easier to change than those without tests. That's what Robert Martin, Kent Beck amon other advocates of TDD are preaching. IMO certain trivial things should not be tested though, e.g. getters and setters.\n\nAlso if you actually would dig into it, you would find out that the XP/TDD folks are all about \"just in time\". A very central principle is that you should only build what you need at a given time, the simplest thing that could possibly work. No cathedrals. It's bizarre that now people start accusing these people of grand designs in the sky. \n\nChanging a legacy codebase with large classes containing many responsibilities, tangled dependencies and no tests is a nightmare. You compile, deploy and try to actually exercise the code in all the ways you can. This takes a long time and you'll miss a lot of things which only fail in production.\n\nThis is why I feel that the latest comments from J&amp;J in the podcast are a bit irresponsible. The cowboy coders among stackoverflow listeners will now feel authorized to continue their bad habits of creating \"instant legacy\" with massive classes with no separation of concerns and no tests. And when they are done, they are leaving a Big Ball of Mud for someone else to maintain while they go somewhere else to poop on the green fields."}, {"author_name": "John Sheehan", "gravatar_hash": "54b75f6fbf4434162bfcda6b0cb9b86b", "author_url": "http://john-sheehan.com/blog", "date": "Jan 22, 2009", "message": "Here's the polyglot for anyone interested: http://mauke.ath.cx/stuff/poly.html (view source)\n\nDiscussed here: http://news.ycombinator.com/item?id=440239"}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Jan 22, 2009", "message": "Fixing issues \"when they crop up\" sounds like a recipe for disaster to me. I don't want to be the one telling a customer, \"Sorry we lost all your data. You see, we don't really care much about quality here - it's not that important. We'll fix the bug now though - you won't lose your data next time.\" Yeah, like the \"next time\" part is going to be relevant for that customer... There will always be bugs, but that doesn't mean the \"only fix them when we happen to find them\" attitude is appropriate.\n\nYes, you can go overboard with unit testing - but the conversation certainly *sounded* like it was veering *way* too far on the other side. I couldn't count the number of issues I've found with unit testing which might well have otherwise made it through to production and cost much *much* more to fix later on.\n\nI'm absolutely sure that I'm writing much more robust code now than before I was unit testing."}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://msmvps.com/jon.skeet", "date": "Jan 23, 2009", "message": "(Continuing previous comment, really.)\n\nI strongly suspect that Joel and Jeff actually take a more balanced approach than the podcast implies. It's easy to get carried away when you're just chatting. I'd be amazed if Joel really didn't care about finding issues until they hit a customer. I can well believe that SO is somewhat sparsely though - not because it keeps going wrong (it works very well) but because when you control the website, the deployment etc it's a lot easier to fix issues. When you have to upgrade client installations, perform data recovery remotely on *their* boxes rather than yours, it's a lot less fun.\n\nOne final point before I stop rambling: the business about \"a constant proportion of your tests break whenever you change anything.\" That may be true of integration tests, but it *shouldn't* be true of unit tests - at least, not for most changes. Yes, some changes will affect a lot of the system in a way which can't be isolated - but a good deal of changes only affect the tests for that class or maybe a couple of others. That's the whole point of the (later derided) separation of concerns.\n\nI'd better make this my last comment on this podcast, otherwise I can see it taking up way too much of my time. Still entertaining, of course, even where I disagree with J&amp;J."}, {"author_name": "Jarrod Dixon", "gravatar_hash": "2dfa19bf5dc5826c1fe54c2c049a1ff1", "author_url": "http://stackoverflow.com/users/3", "date": "Jan 23, 2009", "message": "For our new Bounty functionality on SO, I'm writing a slew of unit tests - YOUR REP SHALL BE SAFE WITH ME!\n\nhttp://stackoverflow.uservoice.com/pages/general/suggestions/18291-bounty-system-for-unanswered-questions"}, {"author_name": "Perttu", "gravatar_hash": "c31b822dc1c8097d66be0334fafbd4c2", "author_url": null, "date": "Jan 23, 2009", "message": "I have to get one more thing out of my system :-) \n\nJeff says that he finds creating a thorough unit test harness valuable when you have to work with old legacy codebases where it's very important not to break anything - \"building scaffolding around this very old building\".\n\nIt's a known issue that legacy codebases without unit tests have a lot of dependencies and tightly coupled modules/classes. It's extremely hard to introduce unit testing for these codebases. There's a good book about the subject called \"Working Effectively with Legacy Code\" by Michael Feathers. Michael's definition of legacy code btw is code without tests :) If you read that book you'll realize just what kind of hacks and desperate measures you'll sometimes have to take to tackle these systems. \n\nIn real life, most people just give up - they can't create the tests at all, hack around making minor tweaks which further detoriorate the design and scream for a rewrite of the whole system. Here is a nice summary of that process by a slashdot member:\n\nhttp://books.slashdot.org/comments.pl?sid=979493&amp;cid=25194819\n\n:-)"}, {"author_name": "Arend", "gravatar_hash": "9d730dbe2e46eb4913c4e5228a8053e6", "author_url": null, "date": "Jan 23, 2009", "message": "Jeff, you mentioned that you use YUI compressor to minify CSS and Javascript files. Doesn't the http protocol support compression?\n\nI wonder how http compression compares to minifying."}, {"author_name": "Mike Woodhouse", "gravatar_hash": "5978e2ed3a31f1bd2361dbb919d92012", "author_url": "http://grumpyop.wordpress.com", "date": "Jan 23, 2009", "message": "I recently celebrated (hah!) thirty years of writing programs for a living, starting with COBOL, passing through stuff like Fortran, PL/1, C, VB1-6, C# and most recently Ruby on the way. Regardless of the improvements in toolsets and technology, I think the main cause for the increase in productivity I've delivered over the years has been the gradual development of an understanding of the agile concepts and how they've affected object-oriented programming. Honest!\n\nI'm no expert in SOLID, God knows, but the more I learn about the various ** Principles, the more often I recall situations where knowing this stuff more formally would have saved a lot of time and effort. Much of SOLID is about minimising the locus of change, knowing that in most situations that change is inevitable.\n\nAnd on unit testing (because everyone else is having a turn) I agree with Jeff that the prospect of writing a thousand unit tests after I've written the code and run it is just horrid. But if I write just one test for one little piece of the function, it's not too bad. And if in fact I write that test before I write the function, it turns out not to be too bad at all. Really rather good, actually - I don't think my technique is all that great but I find myself thinking much more intensely about the structure of my code as I write it. Refactoring becomes something that can be carried out with more confidence (and I do love refactoring) and the testing phase shrinks dramatically.\n\nDone in the \"agile means never having to say 'write a spec'\" sense, the whole damn thing falls apart, of course, as anyone other than the pointy-haired bosses would expect."}, {"author_name": "J\u00f6rg W Mittag", "gravatar_hash": "1f1d81bc927dd67f05ea41f4c8a61e9f", "author_url": "http://StackOverflow.Com/users/2988/", "date": "Jan 23, 2009", "message": "This is the polyglot webpage that Joel was talking about: http://Mauke.Ath.Cx/stuff/poly.html\n\nThe sourcecode of this page is valid HTML, DHTML+JavaScript, Ruby, Python, Perl, Perl6(Pugs), Haskell, C++, C99, C89, ZSH, Bash, sh, Tcl, Brainfuck, Makefile and Whitespace."}, {"author_name": "Bob Weber", "gravatar_hash": "46a44f7fced6ed193281a1247d5b7a3a", "author_url": "http://blog.alltheinfo.org", "date": "Jan 23, 2009", "message": "Jeff!  Don't be telling the whole world the weather is nice in Denver!  We need to keep that a secret!"}, {"author_name": "John Topley", "gravatar_hash": "3b687a35025c05dbc7627af428dff0da", "author_url": "http://www.johntopley.com/", "date": "Jan 23, 2009", "message": "You fixed the paging bugs - awesome! Good work."}, {"author_name": "Mikael Nordin", "gravatar_hash": "ee2bb8c77ba9160deaab861326245399", "author_url": null, "date": "Jan 23, 2009", "message": "I think at least Joel got the DNS caching problem wrong. Its not the users local cache that will cause the main problem, but rather the dns-server that the users ISP is hosting. Running ipconfig /flushdns will only flush the local cache (duh) but if the dns-server (at the ISP) still have the old ip cached it will do no good, you will simply get the cached value again. \n\nTo reduce the problem you could lower the TTL ahead of time, i think you could go as low as 300s. So if the current TTL is set to 3 days, just lower the TTL 3 days ahead of the move. And ones the site is moved restore it to the old value."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 23, 2009", "message": "> I wonder how http compression compares to minifying.\n\nhttp://www.codinghorror.com/blog/archives/000807.html\n\nsee #4"}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 23, 2009", "message": "> i\u2019m the guy that made that port on that codeplex site. Is there any chance you can explain what happened and why you guys had bad luck with it?\n\nTalking to Jarrod now. He says:\n\n\"The already compressed JQuery in our file came out broken with the .NET port of YUI. We set no options on the Yahoo YUI Java version, and it worked fine in the same scenario.\"\n\nPlus, I'll add that it's nice to keep in sync with the official release from Yahoo; we can just copy the JAR file over."}, {"author_name": "Adam", "gravatar_hash": "3192a8b330c77f3384aebe51bb17ec44", "author_url": null, "date": "Jan 24, 2009", "message": "Speed absolutely makes a difference. Not only does it leave a positive association in the mind of the user that leads to return visits, there are also plenty of people on slower connections: in rural communities or less developed countries or even just folks who never bothered to figure out how to limit the bandwidth in their favourite bittorrent client.\n\nYikes - the first time I can remember agreeing with Jeff over Joel.... ;)"}, {"author_name": "Mark Brackett", "gravatar_hash": "69714938a17318a96a5d4673da8892ec", "author_url": null, "date": "Jan 24, 2009", "message": "A couple of points:\n 1. Moving servers, DNS, database backups\n   - Your current DNS TTL is 86400 secs (1 day). &gt; 1 day prior to moving your servers, you want to bump that up to about 60 seconds[1]. Then, DNS servers and clients around the 'net will only cache the DNS entry for www.stackoverflow.com for 60 seconds (instead of 1 day), allowing you to update the server IP address and have it reflected *everywhere* in &lt; 1 minute.\n   - Joel's full backup, then differential backup is probably the easiest way to go. If you write your scripts ahead of time, you should be up in &lt; 5 minutes. Have your full backup already restored on the destination server - but make sure you RESTORE...WITH NO RECOVERY, or you won't be able to apply the differentials.\n   - *Please* don't have a web server talking to your Sql Server over the internet unless it's through a VPN. It just makes my skin crawl thinking about that. A Sql Server is not designed to be a public facing server, and you'll probably either be DoSed or have your sa password dictionary cracked. Do the TTL and differential backup, and you should be fine.\n\n 2. SOLID principles\n   - I can understand Joel not getting it, but I really thought you'd correct him on some of these. First off, the \"Employee class with Salary and Name violates SRP\" argument is *way* off - single responsibility refers to behavior, not data. Most of his other examples were similarly lacking in understanding.\n   - SOLID, like any other principles, can obviously be taken too far. But, I (and many others) have found it to be a fairly useful guideline for design. Of course, we occasionally get real work done, too.\n   - That being said - yeah, Uncle Bob and the like are the \"navel gazers\" of our profession. They also tend towards the academic, but they still have useful advice. Same as Peopleware, or countless other books you've mentioned. Obviously, every bit of advice has to be taken with a grain of salt, and adapted to your situation. If you find nothing useful in it, but thousands of others do - you're probably just misunderstanding it (aka - select is *not* broken).\n \n  3. TDD and Unit Tests\n    - TDD is *not about testing*. It's about design. The unit tests are there primarily to drive the design. That they serve as a regression suite is just a tasty bonus.\n    - If you're constantly breaking 10% of your unit tests with each change, you're either (a) not writing unit tests, because they're testing too much; or (b) making too many changes before you run and fix your test suite. Of course, TDD would have you fix the tests *before* you change the code, so that you come out with a testable design and work the code into the correct behavior (rather than come up with the behavior, and then test it)\n    - I know it's pretty much heresy (I should add it to the controversial opinions thread), but good programmers (like you and Joel) can often get away without tests or much process. Even your worst work is likely to be pretty close to \"good enough\", and any problems you do have can be fixed fairly quickly - often without tests. Even without understanding SOLID, you likely instinctively make similar design choices - that's just how good programmers think. Codifying it, and making it a process, may only allow a 10% improvement in your own code - but, for the other 50% of us below average programmers, it allows us to make decent code to begin with and avoid being featured on the Daily WTF.\n    - If you think you can just add unit tests around a legacy app like scaffolding, then you probably don't know what a unit test really is. I have *never* seen any app developed without unit tests that you can fit them into later without ripping up the code base. The best you can do is some automated testing, but that's not unit testing. To take the building/scaffolding analogy a bit further, unit tests are the QA checks the bricks went through at the factory. You're not going to be able to do those checks later, after they're mortared into walls."}, {"author_name": "Mark Brackett", "gravatar_hash": "69714938a17318a96a5d4673da8892ec", "author_url": null, "date": "Jan 24, 2009", "message": "Whoops - forgot the footnote...\n\n[1] If your secondary DNS server doesn't support notify updates, you'll probably want to change the refresh time   as well. Currently, it's set to 8 hours - so, assuming your DNS server stays reachable - you have a maximum cache time of 8 hrs (for secondary DNS server) + 1 day (TTL). \n\nObviously, you can decrease the TTL and refresh times in increments if you time it right if you're concerned about the 60 second load (so, go from 1 day to 8 hours to 4 hours etc. as moving time gets nearer). I've never had a problem with it, but I'm not running any sites as popular as Stackoverflow."}, {"author_name": "Chris", "gravatar_hash": "f89b5f030e5a8a254249d477f88b24f4", "author_url": null, "date": "Jan 24, 2009", "message": "Premature optimization is the root of all evil."}, {"author_name": "Marko", "gravatar_hash": "5b6e93d7b3eb572cab2008ce4c2232c4", "author_url": "http://www.horizontblog.com", "date": "Jan 26, 2009", "message": "Hey, great show. I'm new in podcast listening(i bought zune :)) and I really like what you guys are doing. What I don't like is little bit exclusive approach of the hoster, but everething else is just fine.\n\np.s. Great logo :)"}, {"author_name": "John Oxley", "gravatar_hash": "103bf714054031630faabdceea4e9073", "author_url": null, "date": "Jan 28, 2009", "message": "Hi Jeff,\nListening to this podcast about the move of servers.  One option you could use is setup your current DB server as a master and setup the new DB server as a slave then use SQL replication to get the data across.  Your data on the new server will always be current, then when you move the DNS, you don't have to worry about the database, just turn off replication.\n\nI would also recommend setting up a A record, new.stackoverflow.com which points to the new stackoverflow web server.  When you move the DNS, on the old server, setup a 302 redirect to new.stackoverflow.com.  That way people will automatically see the new site.  After a few weeks when the DNS cache is cleared, you can then setup 301 on new.stackoverflow.com to stackoverflow.com."}, {"author_name": "Jim Anderson", "gravatar_hash": "1bd6173e0acb78f9769dfff32bbecd5a", "author_url": null, "date": "Jan 31, 2009", "message": "Uncle bob responds to SOLID criticism on his blog:\n\nhttp://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel\n\nand asks for rebuttal time on Stackoverlow podcast."}, {"author_name": "Jimmy the Geek", "gravatar_hash": "85e4239ff9662bf8296083d98da17677", "author_url": null, "date": "Feb 01, 2009", "message": "If you are constantly changing an interface enough to break all the unit tests, you are doing something wrong.  Typically problems of this nature only occur when people try to make an interface do multiple different tasks, instead of designing interfaces the way you should.\n\nEach interface should do one thing and one thing only.  Not one and half things, not two things, not ten things.  One thing.  The interface should be simple enough to not need to change much ever.  If anything all you should need to do is add more methods to the existing methods over time, which means you need to add in some more unit tests for the new methods, without much change in the old methods.  \n\nAnd the faster you are changing things, the more important unit tests are.  If you are making changes to an interface 5 times a day, it becomes ever more important to be able to run unit tests against those changed interfaces in order to ensure you have not broken anything.  Otherwise how do you ensure that the change has not broken some functionality without testing?\n\nI built a buffer once, that was going to be used everywhere in our code.  Because it was going to be used in so many places I wrote a set of unit tests that threw everything and the kitchen sink at this interface.  It took me longer to write the unit tests than it did to write the library that did the work. I made sure the tests walked every path so that every line of code was tested in that library.  I never once had any production problems ever, in two years with that library.  Not one single bug in code that was called in networking, serial port, cgi interface, queue code, in the string implementation, and various other places. Kind of remarkable, and it is all because of the testing I did ahead of time."}, {"author_name": "Chris", "gravatar_hash": "b6b87721c444078a99633d6ed9352cec", "author_url": null, "date": "Feb 01, 2009", "message": "\"Because it was going to be used in so many places I wrote a set of unit tests that threw everything and the kitchen sink at this interface.\"\n\nIsn't this exactly what Jeff and Joel are saying?  There are times when lots of unit testing, etc. is justified, but it depends how important a piece of code is and what happens if it breaks."}, {"author_name": "Brian Takita", "gravatar_hash": "a0599814ceddc2e283792f4e47c57f5e", "author_url": "http://www.pivotalblabs.com/users/brian/blog", "date": "Feb 01, 2009", "message": "I just hope people don't take your advice as a license to be a cowboy programmer. I'm sure you will agree that categorically saying unit tests are a waste of time without thinking about it is penny-wise/pound-foolish and akin to saying reasonable thought about a problem is a waste of time.\n\nHaving programmers break the app with untested changes is a huge waste of time, especially when you have multiple developers working on the same code base. When somebody notices the breakage, they have to take the time to figure out what went wrong, who was responsible, and then notify that person and the rest of the team. The person that broke the app will then need to drop everything and fix the issue. I'm sorry but I like to avoid this as much as possible. It sounds like stupid driven development to me. If there is a reasonable alternative to rapidly iterate and avoid other developers breaking the app, then I'm all ears.\n\nSo yes, theoretically all testing is a waste of time, because theoretically we get everything correct the first time and nothing unexpected ever happens. The problem is theories need evidence to back them up."}, {"author_name": "Brian Takita", "gravatar_hash": "a0599814ceddc2e283792f4e47c57f5e", "author_url": "http://www.pivotalblabs.com/users/brian/blog", "date": "Feb 01, 2009", "message": "&gt; Also writing code without unit tests is ALWAYS faster than writing code with tests.\n\n@Gishu - Be careful when using always, because you will always be wrong :-)\n\nAnyways, for me writing test first enables me to develop faster than just writing the code alone. I don't get stuck in analysis paralysis nearly as much as I used to. I don't make many of the stupid mistakes I used to.\n\nI don't need to attend to multiple abstraction levels regularly. That alone is a huge win. A good analogy is successful people write down their goals. I don't have to think about starting 10 companies when trying to find the broccoli at the supermarket so I can cook dinner.\n\nI write tests so I don't have to remember everything all the time."}, {"author_name": "techzen", "gravatar_hash": "852f6c2fa47c80cd1925e465645da88f", "author_url": "http://techzen.wordpess.com", "date": "Feb 01, 2009", "message": "Was glad to read a practical discussion to unit test creation and TDD."}, {"author_name": "Darrell", "gravatar_hash": "5b6cceada0871b3660dea3d89cdb4eaf", "author_url": null, "date": "Feb 02, 2009", "message": "One person said, \"but, for the other 50% of us below average programmers...\".\n\nActually that's not correct. 50% of the population is NOT below average. 50% of a population sample is BELOW MEDIAN.\n\nHere's how to think about it, the average number of legs per person taken over the entire world is below 2. Some people have no legs, some only have one, most have 2.  So the average is less than 2, and your probability of meeting someone above average is very high.\n\nWhen you start thinking like that, you are working for the least common denominator - which is difficult and aggravates everyone above the common denominator.\n\nThe commenter also said \"codifying it into a process\" which is exactly what Agile was formed AGAINST!  People over processes!  What Joel is talking about is all these agile \"design patterns\" and everything else that might be overkill is contradictory to the YAGNI agile principle."}, {"author_name": "Chris", "gravatar_hash": "b6b87721c444078a99633d6ed9352cec", "author_url": null, "date": "Feb 02, 2009", "message": "\"Suppose that after you\u2019re done, another requirement, that is somehow related to previous one, comes in.\"\n\nThis sort of refers obliquely to something I've been wondering about.  Jeff and Joel both run their own companies.  Requirements don't just \"come in\", Joel and Jeff decide what features they want to add to their software to please their customer base.\n\nI'm wondering if this might account for some of the difference in opinion.  Jeff and Joel run small, self-funded startups, run by (and largely for) programmers, focused on producing web or shrinkwrap software directly to customers.  I don't know what sort of business the people participating in this discussion are in, but from comments like the one I quoted above lead me to believe that some of the folks here are work in much larger organizations where their project (or programming in general) is just a small part of the larger scheme of things, or in consulting shops that get their direction from a customer who's paying them to write code.  This may account for some of the very different views on things like SOLID and TDD.\n\nFor instance, SOLID seem to emphasize modularity quite a bit.  The ability to change or rip out any portion of your code in response to some external directive makes a lot of sense in a context where the developers don't have control over the requirements for or future development direction of the software.  \n\nJeff and Joel, on the other hand, have much more control over the products they're writing.  They still respond to market forces and customer needs, of course, but they're the ones who make the decision of which direction to go and what is going in the product.  In this context, it makes much more sense to only modularize stuff that you think is likely to change in the future.  Sure, they might end up having to change stuff they didn't modularize, but if they do a good job choosing where to put their modularity, it will end up being much less work than modularizing everything."}, {"author_name": "Ray Vega", "gravatar_hash": "8ab1e7a181808b0e35932f06a8aff8c9", "author_url": "http://lexicalclosures.blogspot.com/", "date": "Feb 04, 2009", "message": "First, Uncle Bob and, now, Kent Beck has responded to criticism regarding unit testing and TDD:\n\nhttp://www.threeriversinstitute.org/blog/?p=29\n\nInteresting to note that Kent Beck is a Stack Overflow user himself:\n\nhttp://stackoverflow.com/users/13842"}, {"author_name": "Steven A. Lowe", "gravatar_hash": "4c263fe87d408564a9e5f6d1e519aed4", "author_url": "http://www.nov8r.com", "date": "Feb 04, 2009", "message": "TDD is not \"all about 100% code coverage\"; i think you should retract that ridiculous statement, or back it up"}, {"author_name": "yapiskan", "gravatar_hash": "1fb64d4572550c00bdcac58126dfe6ce", "author_url": null, "date": "Feb 12, 2009", "message": "An open letter from uncle bob to jeff and joel;\n\nhttp://blog.objectmentor.com/articles/2009/02/06/on-open-letter-to-joel-spolsky-and-jeff-atwood\n\nat objectmentor."}, {"author_name": "Samir", "gravatar_hash": "f59dcf5a6917b382cda7c38d807e938a", "author_url": null, "date": "Feb 22, 2009", "message": "guys, I am trying to find the link to download podcasts from this site without success.\ncan u please let me know where the link is hidden?"}, {"author_name": "Justin Adler (aka Pure Krome)", "gravatar_hash": "8b9a3d325d32a1dfed22022800e07a3f", "author_url": null, "date": "Feb 22, 2009", "message": "Hi Jeff/Joel and now Jarrod :)\n\ni'm staying away from the main debate in this page .. and trying to come back to the part about YUI Compressor for .NET. \n\nI've updated the YUI Compressor for .NET code to now work 100% with jquery1.2.6.vsdoc.js (it's completly identical). I'm not using jquery, but i believe the code update makes it identical. It has the same exact file size AND when i used a compare program, it reakons it's identical now. So maybe it's worth trying to use it once more? If the yahoo java gets updated, i usually update the .net DLL also. Like the .jar file, the .net .dll just needs to be dropped in the project also, so upgrading is pretty simple too.\n\nanyways .. was worth another try to give it a plug ... :)\n\nlove your work. cheers.\nJustin."}, {"author_name": "cheapest ghd iv styler hair straightener", "gravatar_hash": "ed3686c4b3bc1b75cf332fb606a1c250", "author_url": "http://www.stylerghd.co.uk", "date": "Oct 06, 2009", "message": "<a href=\"http://www.stylerghd.co.uk/\" rel=\"nofollow\">GHD iv styler</a> from ghd straighteners, curls as easily as it straightens,buy <a href=\"http://www.stylerghd.co.uk\" rel=\"nofollow\"><strong>cheapest ghd iv styler hair straightener</strong></a>,<a href=\"http://www.stylerghd.co.uk/ghd-iv-mk4-gold-hair-straightener-flat-p-3.html\" rel=\"nofollow\"><strong>ghd iv mk4 gold</strong></a>,ghd uk online with low price,free shipping!"}, {"author_name": "waerwre", "gravatar_hash": "c62d3d06a58d1b6e1a76435591cf7dcc", "author_url": "http://www.mytobling.com", "date": "Oct 15, 2009", "message": "<a href=\"http://www.mytobling.com/ugg-skimmer-c-38.html\" rel=\"nofollow\">UGG Skimmer</a>"}, {"author_name": "kino-get", "gravatar_hash": "d726b315c59dcba187ed39fbd23c9b4c", "author_url": "http://kino-get.ru", "date": "Oct 24, 2009", "message": "<a href=\"http://kino-get.ru\" rel=\"nofollow\">\u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043a\u0438\u043d\u043e \u0444\u0438\u043b\u044c\u043c\u044b \u043d\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438</a>"}, {"author_name": "abercromie&amp;fich", "gravatar_hash": "a78e18ffcf21bc21aba135cf3c043948", "author_url": "http://www.anfsmall.com", "date": "Nov 17, 2009", "message": "strongly agree with Gishu about Joel\u2019s misguided interpretation of Robert C Martin\u2019s SOLID principles. Uncle Bob is certainly no \u201carchitecture astronaut\u201d. Just read his \u201cAgile PPP\u201d book or the newer \u201cClean Code\u201d. \n<a href=\"http://www.anfsmall.com/\" rel=\"nofollow\">abercrombie fitch</A>|<a href=\"http://www.lv-super.com/\" rel=\"nofollow\">\u30d6\u30e9\u30f3\u30c9\u30e0\u30c3\u30af</A>|<a href=\"http://www.abercrombieandfitchagency.com/products.php?id=1\" rel=\"nofollow\">\u30a2\u30d0\u30af\u30ed \u9280\u5ea7</A>\nToward the end of this podcast it sounded almost like Joel &amp; Jeff were actually promoting quick and dirty programming with remarks like \u201cquality doesn\u2019t matter\u201d or something like that."}, {"author_name": "herve leger dress", "gravatar_hash": "f60227ae6d76f9097b9abc361303e3cd", "author_url": "http://www.hervedressbuy.com/", "date": "Dec 24, 2009", "message": "For your New Year\u2019s Eve soiree, try the <a href=\"//www.hervedressbuy.com/\\\" rel=\"nofollow\"><strong>herve leger bandage</strong></a>.Holiday season is a time of the year for looking your best,you can choose what you like on <strong><a href=\"//www.hervedressbuy.com/\\\" rel=\"nofollow\">herve leger sale</a></strong>."}, {"author_name": "uggs outlet", "gravatar_hash": "4766453d76bd965f53ad026750042bac", "author_url": "http://www.uggsoutlet.net", "date": "Jan 24, 2010", "message": "Thanks for sharing,Keep going"}, {"author_name": "Steve Wortham", "gravatar_hash": "7c4d1e4f8701946b8391d009d8d85221", "author_url": "http://regexhero.net/", "date": "Mar 04, 2010", "message": "About caching... one safe way to go is to set your expires to something more conservative.  A lot of sources will tell you to set your expire (or max-age) setting to a far-future date.  \n\nBut on most of my sites I actually just set \"Cache-Control: max-age=3600\" for my css, js, and images.  That's a one hour expiration.  And as it turns out, the user's visit is rarely longer than one hour on any of my sites.  It has worked out well and I think it's a good compromise between performance and delivering reasonably fresh content."}, {"author_name": "Harvey Windows", "gravatar_hash": "86b72b09a47be8aa02dda95ca1c4cb66", "author_url": "http://www.harvey-windows.info", "date": "May 24, 2011", "message": "Yslow is great tool, use it for most of my clients initial reviews."}]}