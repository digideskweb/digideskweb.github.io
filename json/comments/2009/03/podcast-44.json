{"response": [{"author_name": "VonC", "gravatar_hash": "7aa22372b695ed2b26052c340f9097eb", "author_url": "http://stackoverflow.com/users/6309", "date": "Mar 05, 2009", "message": "If you want to check out some \"Architect\" titles that would actually make sense, check out the answers to the question: \"Should Architects write code ?\" (mine: http://stackoverflow.com/questions/212270/should-application-architects-write-code/212362#212362 )\n\nThere is no such thing as just a \"Software Architect\" (a bit too generic); but titles which give a clear distinction between responsibilities can add real values.\nMy \"business-functional-applicative-technical\" types of Architects is only one possibility. \n(security architect, data architect, and other areas can use some functional/technical risk management and leadership too)"}, {"author_name": "Randy", "gravatar_hash": "736e7475192b209298ea6fd940866352", "author_url": null, "date": "Mar 05, 2009", "message": "I used to program in a language called Mesa when I worked at Xerox in the 1980s.  I'm sure it was a descendant of Algol-68.  It had named parameter arguments and I loved it.  It was great to see the parameter names.\n\nIt also allowed returning more than on value from a function that could be separated with similar syntax.  For example:\n\n    [width: w, height: h] = getDimensions();\n\nIn fact, I need *that* method for my current project right now, but I'll have to either return an array or create a silly small class.\n\nRandy"}, {"author_name": "Chris Conway", "gravatar_hash": "c1cc649bda672575d17d588b81513dfd", "author_url": "http://procrastiblog.com", "date": "Mar 05, 2009", "message": "<blockquote>Brian is ... the creator of the Awk language</blockquote>\n\nCo-creator, with Al Aho and Peter Weinberger, as I'm sure he would be the first to point out."}, {"author_name": "mgb", "gravatar_hash": "7010f170ec917b56e173f3978c459e0e", "author_url": null, "date": "Mar 05, 2009", "message": "Python also has named arguements. \nHaving many arguements might be necessary to something like a fileopen() where you normally only supply a couple of args but might occasionally want to pass in a whole bunch of obscure security or communications settings.\n\nNamed args saves you the remembering the order of a bunch of 0,NULL, args that you never use or getting an obscure struct, fiddling with bits and passing the struct back."}, {"author_name": "theman_on_vista", "gravatar_hash": "535397b708dc316389dd4041a2797496", "author_url": null, "date": "Mar 05, 2009", "message": "OMG YES!@!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nill wait till tomorrow morning before I listen to it\n\n&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;3&lt;&lt;&lt;#"}, {"author_name": "Nick", "gravatar_hash": "11d98913b80d3a054d345cda6b611ff8", "author_url": "http://theroadgoeseveronandon.com", "date": "Mar 05, 2009", "message": "I think the \"Architects\" and the programmers should switch positions at regular intervals so the \"Architects\" don't get too far out of the atmosphere."}, {"author_name": "Cristian", "gravatar_hash": "7faed2352a1c5e5b4295f4500711a3e0", "author_url": null, "date": "Mar 05, 2009", "message": "I looked into the differences between HTTP 1.0 vs. 1.1 way back when. The main differences I remember are:\n\n1) HTTP 1.1 keeps the TCP connection between the client and the server. In HTTP 1.0, the connection would be closed right after the response.\n\n2) The header field is required in HTTP 1.1. No header fields were required in 1.0. You could just say GET / HTTP/1.0 and that would be fine. This is probably related to Joel's thinking that you couldn't host multiple sites on the same server. You don't put the domain in the path, you put it in the Host header field."}, {"author_name": "BobbyShaftoe", "gravatar_hash": "526f22eb98e81ea305bdcf777e4f733d", "author_url": null, "date": "Mar 05, 2009", "message": "Why all this complaining about the C prorgramming language. It is a very powerful, classic, well documented, and arguably well designed programming language. It seems very strange to go on about it like this. I though you all were the whole \"imrpove the craft\" mantra; however, this thing you have for C is very strange. You realize most CS juniors know C right? I know you said somewhere you went to UVA, I think. Do they not teach computer science at UVA? I realize the common wisdom is that undergraduate institutions only teach Java now, but the only people saying that are those who haven't been to any undergraduate institutions lately. ... Anyway, enjoy the podcast but I don't understand this phobia against C (ok, I don't understand the take you guys have on mathematics either)."}, {"author_name": "SD", "gravatar_hash": "587d2f74acc18ec6d9b84c0a8a7f21d2", "author_url": null, "date": "Mar 05, 2009", "message": "Did you mean 6 megabits/sec (as opposed to kilobits/sec)?"}, {"author_name": "Lorenz Pretterhofer", "gravatar_hash": "707b8e364fec548b201164051676ce3c", "author_url": "http://alexicalmistake.com/", "date": "Mar 06, 2009", "message": "On the HTTP differences, Cristian is absolutely right, however, the 1.1 standard doesn't actually require that a connection is kept. It's just an optional feature that more or less all modern clients/servers use by default.\n\nThe thing is, besides having to reconnect to get every successive resource, a proxy doesn't need to check anything directly, making them fully upward compatible. This means that any ancient or experimental clients will still work over them, while all the 1.1 stuff generally continues to work.\n\nSpecifically, its the host attribute that is required, but the syntax for attributes is also available in 1.0 anyway, so it will still work in practice if you put it in anyway.\n\n-- Lorenz"}, {"author_name": "Ben", "gravatar_hash": "edda09e989ccdaca24145eb181aada7e", "author_url": null, "date": "Mar 06, 2009", "message": "I think one of the goals of named/optional function parameters in C# 4.0 is to make interop (e.g. with Word/Excel) easier.\n\nSo instead of saying\n\ndoc.SaveAs(ref fileName,\n    ref missing, ref missing, ref missing,\n    ref missing, ref missing, ref missing,\n    ref missing, ref missing, ref missing,\n    ref missing, ref missing, ref missing,\n    ref missing, ref missing, ref missing);\n\n\nit becomes\n\ndoc.SaveAs(\"filename.doc\")"}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://msmvps.com/jon.skeet", "date": "Mar 06, 2009", "message": "About C#, Joel said: \"Do you think they'll ever have like Python-like list comprehensions in C# where you can do a big old transformation on a list in one line?\"\n\nIf you're going to make criticisms of a language's evolution, you should really try to keep up with it. What you're asking for is the *biggest* change in C# 3 and .NET 3.5. Please learn at least the basics of LINQ before commenting on the current state of C#.\n\nThis isn't something brand-new, either: .NET 3.5 has been *out* for nearly a year and a half, and the first designs (and even language specs) for it have been around for *three and a half years*.\n\nHow is it even slightly reasonable to talk about the C# 4 proposed features without a grasp of the main feature of C# 3?"}, {"author_name": "gamecat", "gravatar_hash": "0b4b433679e1fb52f7e2ef4ea492496d", "author_url": null, "date": "Mar 06, 2009", "message": "Not sure when they became operational, but thanks for implementing the mod tools. They are great!"}, {"author_name": "Pete Kirkham", "gravatar_hash": "2180b1a962bf46e58fa9746cb4ebfb91", "author_url": null, "date": "Mar 06, 2009", "message": "A kibibyte is a light snack made of kibbled grain."}, {"author_name": "Brian R. Bondy", "gravatar_hash": "84af4c25398f072ce1462795fd67bf49", "author_url": "http://www.brianbondy.com", "date": "Mar 06, 2009", "message": "HTTP 1.0 vs 1.1 Stack Overflow question:\n\nhttp://stackoverflow.com/questions/246859/http-1-0-vs-1-1/247026#247026"}, {"author_name": "Pietro Polsinelli", "gravatar_hash": "5198744cd329b6dfdb9e39b4f9794cd1", "author_url": "http://polsinelli.wordpress.com", "date": "Mar 06, 2009", "message": "Another interesting podcast; just remarking that in the strange sounding analogy between Cobol and Java, you seem to identify the way a language is used by a lot of people (\"Java as Visual Basic\") (but no way by all) with inner features of the language. You could use C# for your Cobol-activity, just like you do with Java, no? Its more the flexibility that made it popular in the enterprise, not some kind of inner limitation."}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://msmvps.com/jon.skeet", "date": "Mar 06, 2009", "message": "@Pietro: It was also interesting to note the opinion of Java not being useful outside servers these days. I wonder if either Jeff or Joel has used a G1? :)"}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "Whenever Jeff and Joel talk about Java it quickly becomes abundantly clear that they are utterly ignorant of the advances that have been made in the last few years. I'm talking specifically of the performance improvements in the JVM and the features that were added to the language in version 5.0, such as\n\nvarargs, annotations, generics, enums, enhanced for loop, autoboxing/unboxing\n\nAlso their opinion that Java is slow, is utter hokum. It is arguably (of course) the fastest of all the managed code languages/environments. I'll admit that the JVM startup time can be a little lengthy, but given that the sweet spot of Java is on the server, this really doesn't matter much.\n\nThe suggestion that Java has failed outside the server is also hokum, it is by far the leading technology deployed on mobile devices and there are a lot of really nice Java desktop applications, e.g. JAlbum."}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://msmvps.com/jon.skeet", "date": "Mar 06, 2009", "message": "(Apologies for the somewhat brusque tone of my earlier comment about LINQ, btw. I'm a little overly fond of LINQ and C# in general, which makes me defensive...)"}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "@Jon\n\nI don't think you need to apologise, your comment:\n\n\"If you\u2019re going to make criticisms of a language\u2019s evolution, you should really try to keep up with it.\"\n\nwas about C#, but it exactly mirrors my own thoughts (above) about their opinions on Java"}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Mar 06, 2009", "message": "@Donal: I think an apology for the *tone* is appropriate, but the meat is still accurate I guess.\n\nAs for the comments about Java - I think it *is* fair to say that Java has been improving at a glacial rate. How long has Java been in development? And now it seems it's not getting half of the proposed language features after all... Personally I'd like to see a \"new Java\" which can right all the wrongs of Java, breaking compatibility where necessary, but still running on a JVM (or perhaps a JVM modified with new features for things like reified generics and user-defined value types)."}, {"author_name": "theman_on_vista", "gravatar_hash": "776fc61036a84f03601589ed7fba87b2", "author_url": null, "date": "Mar 06, 2009", "message": "@skeet - like groovy and scala?"}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "@Jon: I think \"glacial rate\" is a bit of an exaggeration, though I'd agree the Java language hasn't been as aggressive in adding features as C# for example.\n\nLargely, I think this is because the Java language designers have made 100% backward compatability a requirement whereas C# hasn't. Whether or not this decision is right or wrong could be debated endlessly, though I will say that it's easier to add breaking features to a language which is at an earlier stage of maturity. About 5 years ago, Java was a more widely-used language that C#, so at that point it was more justifiable for C# to add backwardly incompatible features that it was for Java. My own opinion is that it's fine to add backwardly incompatible features if you provide a very easy upgrade path, e.g. a tool which can automatically migrate old code to the new language version.\n\nReturning to the the SO podcast, I find there's a lot of pontificating about languages which is ill-informed. Don't get me wrong, I really like the podcast, and Jeff's blog, and I love SO, but I think they deserve to be called out on statements that are made (usually about languages) that are out-of-touch with recent developments. A very specific example of this is that in the last podcast Joel said that in Java you still *always* have to list the type on both sides of the '=', e.g.\n\nList list = new ArrayList();\n\nthis is simply not true, you can write a static factory method\n\npublic static  List newList() {\n    return new ArrayList();\n}\n\nand with the method above statically imported, call it like this:\n\nList stringList = newList();\nList objList = newList();\n\nAs you know, this feature was added in Java 5.0, but evidently Jeff &amp; Joel are unaware of such 'recent' changes."}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Mar 06, 2009", "message": "@Donal: There are only a *very* few breaking changes in C# that I'm aware of - and the compiler picks up on all of them and produces warnings.\n\nIf you can think of any significant ones, I'd love to hear details :)"}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "@Jon: I'm not suggesting that there have been lots of highly disruptive backwardly incompatible changes in C#, but there have been some minor ones. AFAIK, in Java there have never been any. \n\nAgain, I'm not saying that Java's 100% backward compatibility is right/wrong, but it's easier for languages to make such changes earlier in their evolution."}, {"author_name": "mgb", "gravatar_hash": "7010f170ec917b56e173f3978c459e0e", "author_url": null, "date": "Mar 06, 2009", "message": "I have been thinking of taking up Java again - just because all the CRUD jobs have now moved to C# and there are a lot of interesting new ideas being tried out in Java."}, {"author_name": "Pop Catalin", "gravatar_hash": "6905efdf12e66dd9a3b94e6aa4d01cac", "author_url": null, "date": "Mar 06, 2009", "message": "\"I\u2019m not suggesting that there have been lots of highly disruptive backwardly incompatible changes in C#, but there have been some minor ones\"\n\nI'm curious what breaking changes you have in mind, I've never been affected by a breaking change in C#, and I've migrated code bases and apps starting from C# 1.0 to C# 2.0 and to C# 3.0.\n\nAnd also I don't remember seeing anywhere a bug report or story about issues caused by breaking changes in C#, although I vaguely remember a issue I once had when converting a project from .Net 1.1 to 2.0 (but that was not from any C# breaking changes, but from a documented breaking change on winforms controls, a library breaking change)"}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Mar 06, 2009", "message": "I can think of one single breaking change in C# from 1 to 2. Method group to delegate conversions gained variance, which means that the set of candidate methods for any particular method group expanded. If a \"newly considered\" method is in a subclass and the previously selected method is in the base class, you get different behaviour. If you grab the source code for C# in Depth from http://csharpindepth.com/Downloads.aspx you'll find \"BreakingChange.cs\" which demonstrates this.\n\nI can't think of any other examples though, and this one gives a warning.\n\nThere was one more significant change from 1.0 to 1.2 - in 1.0 the foreach loop didn't call Dispose at the end. However, it's only with iterator blocks in 2.0 that this really becomes significant anyway, and I can't remember the last time I saw anyone using 1.0 :)"}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Mar 06, 2009", "message": "@theman_on_vista: I must try Scala some time. I think Groovy counts as being \"Java done differently\" rather than \"Java done right\" - it's a very different language IMO, despite sharing some syntax. Just the fact that it's dynamic is enough to make it a big step away from Java."}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "Rather than being strictly a dynamic language (a la JavaScript), types in Groovy are optional, so you include them if you want the protection of the compiler and omit them when you want flexibility. The best of both worlds IMO."}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Mar 06, 2009", "message": "@Donal: Well, there's more to it than that. It's a truly dynamic language in that you can invoke methods which aren't explicitly defined at compile-time - other code can notice that you're trying to call a method which isn't present in the normal compiled type, and execute code based on the method's name, parameters etc. That's what GroovyObject.invokeMethod is all about. See section 7.6 of Groovy in Action.\n\nIf that isn't \"strictly\" a dynamic language, what's it missing?"}, {"author_name": "Jon Skeet", "gravatar_hash": "6d8ebb117e8d83d74ea95fbdd0f87e13", "author_url": "http://csharpindepth.com", "date": "Mar 06, 2009", "message": "@Donal: Just to back-pedal a little bit - I guess there's the difference between the static *declaration* of types for variables etc and static member invocation. Is that the major difference you meant?\n\n(I'll admit it's a long time since I've actually used Groovy in anger. I'm going to have to install it again pretty soon...)"}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "@Jon: Yes, I was really just thinking of dynamic/static in terms of type declarations, rather than invocations."}, {"author_name": "Paul Barry", "gravatar_hash": "6661ef9d747db3af8896cd94959d717d", "author_url": "http://paulbarry.com", "date": "Mar 06, 2009", "message": "Jeff,\n\nWhat are you talking about with this comment?\n\n\"One C design decision I agree with: using carriage return as your programming line terminator is not a good idea. Having an explicit line ending character like semicolon gives you so much more flexibility, and is far less awkward than weird line continuation characters.\"\n\nI are saying languages should *require* semicolons, as C and Java do?  Isn't making it optional as it is in almost all modern languages (Ruby, Scala, JavaScript, etc.) much better?\n\nIt seems to me that this is silly:\n\nfoo();\nbar();\nbang();\n\nThis is much nicer:\n\nfoo()\nbar()\nbang()\n\nBut if I do want to shove them on one line, then I do this:\n\nfoo(); bar(); bang()\n\nAm I missing something?"}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "@Paul: What I think you're missing is the case where you have a very long line of code that spans multiple lines in the editor. In a language that requires semi-colon insertion you can simply use a line-break at the end of each line in the editor, e.g.\n\nthisIsAVeryLong.lineOfCode().itSpans().multiple()\n  lines().inTheEditor();\n\nHowever in languages which use a linebreak as a line-termination character, you need to use a special character at the end of the first line to indicate that the line of code should not terminate\n\nFor example in VB you use '_'\n\nthisIsAVeryLong.lineOfCode().itSpans().multiple() _\n  lines().inTheEditor();\n\nIn MatLab you use '&amp;'\n\nthisIsAVeryLong.lineOfCode().itSpans().multiple() &amp;\n  lines().inTheEditor();\n\nIMO, languages that require semi-colon have an advantage in this case, because all lines of code are handled identically regardless of how many lines in the editor they span, i.e. the line ends with a semi-colon.\n\nI'm not saying that semi-colon insertion is better *per se*, just that in this respect they seem preferable."}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 06, 2009", "message": "UPDATE: Sorry the VB and MatLab examples should have been written without a terminating semi-colon, like this:\n\nFor example in VB you use \u2018_\u2019\n\nthisIsAVeryLong.lineOfCode().itSpans().multiple() _\nlines().inTheEditor()\n\nIn MatLab you use \u2018&amp;\u2019\n\nthisIsAVeryLong.lineOfCode().itSpans().multiple() &amp;\nlines().inTheEditor()"}, {"author_name": "Chaz Meyers", "gravatar_hash": "c125870a852b79389553c983657b1331", "author_url": "http://www.chazmeyers.com/", "date": "Mar 06, 2009", "message": "I think force feeding gzipped content to agents that don't want it is a bad idea. If the author took the time to write code to decompress gzip, I would be shocked if they didn't take the time to add that HTTP header. \n\nHTTP/1.0 does allow for gzipped content. \n\nProxies, I think, often downgrade requests to HTTP/1.0 because of the chunked encoding and persistent connection features added to HTTP/1.1 can make implementing a proxy server much more annoying."}, {"author_name": "NevilleDNZ", "gravatar_hash": "e9e4d4febb28ce00439ef87d714e0247", "author_url": "http://sourceforge.net/projects/algol68", "date": "Mar 07, 2009", "message": "Quoting wikipedia \"Curly-bracket syntax pre-dates C. BCPL was the first language to use curly brackets to outline multi-statement function bodies. Ken Thompson used the feature in B, his cut-down version of BCPL. Because C was initially designed after B, it has retained the bracket syntax of B, as have many subsequent languages\".\n\nJOVIAL(ALGOL 58) and ALGOL 60 use \"begin ~ end\" only. \n\nALGOL 68 has a choice of \"enclosed clauses\", eg \"begin ~ end\" OR \"( ~ )\", \"do ~ od\", \"case ~ in ~ out ~ esac\" and finally \"if 'condition' then ~ else ~ fi\".  With the /brief/ \"if ~ fi\" enclosed clause being \"( 'condition' | ~ | ~ )\" - {similar to C's \"( 'condition' ? ~ : ~ )\"}.  These make it a whole lot easier to spot mismatched \"brackets\".\n\nTo find out how \"if ~ then ~ fi\", \"do ~ done\" and \"case ~ in ~ esac\" got into the Bourne Shell check out this weeks http://www.computerworld.com.au/article/279011/-z_programming_languages_bourne_shell_sh"}, {"author_name": "Ricky", "gravatar_hash": "e3d7f073397c4beb994ed8e264ae73e5", "author_url": null, "date": "Mar 07, 2009", "message": "found an interesting take regarding basic including vba excel from Greg Whitten. http://www.reddit.com/r/programming/comments/82s16/has_joel_spolsky_been_honest_about_his_time_at/"}, {"author_name": "Isaac Lin", "gravatar_hash": "408975adb6e2f531f290e7fe0209a3a9", "author_url": null, "date": "Mar 07, 2009", "message": "@Donal: Just a note about Joel's comments on Java's speed: after a bit of complaining at first, Joel said exactly what you said. It's the startup time that he is complaining about, and this doesn't matter for server-side Java."}, {"author_name": "Paul Barry", "gravatar_hash": "6661ef9d747db3af8896cd94959d717d", "author_url": "http://paulbarry.com", "date": "Mar 08, 2009", "message": "@Donal\n\nAh, well most language that use new line as the line terminator have support for putting a new line that doesn't terminate the expression in places that make sense.\n\nFor example, in Java, JavaScript or Ruby, you can say\n\nthisIsAVeryLong.lineOfCode()\n  .itSpans()\n  .multiple()\n  .lines()\n  .inTheEditor()"}, {"author_name": "Hayden Jones", "gravatar_hash": "bbc857f1d9550ec3595660b10acc6af7", "author_url": null, "date": "Mar 08, 2009", "message": "Maybe it would be nice if Joel invited some like Dick Wall of the Java Posse onto the podcast."}, {"author_name": "Cees Meijer", "gravatar_hash": "eb94d6c5458eedeb554d70e7081a007c", "author_url": "http://c-scope.blogspot.com/", "date": "Mar 09, 2009", "message": "\"...customization is a double-edged sword. We\u2019ve resisted a lot of per-user customization options on Stack Overflow for similar reasons.\"\n\nOuch. Did it not come to your minds that most of the drawbacks of customisation are not valid for web-based applications ? One of the major advantages of these apps is that any customisation is persistent, no matter from which computer you work. I think the iGoogle personal home page is a perfect example. It would actually be almost worthless if it was not fully customizable."}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 09, 2009", "message": "@Paul\nIn Java, you must terminate *every* LOC with a semicolon, so your example above:\n\nthisIsAVeryLong.lineOfCode()\n.itSpans()\n.multiple()\n.lines()\n.inTheEditor()\n\nwill generate a compiler error in Java. In JavaScript, if you omit the semicolon, the interpreter 'guesses' where you should have included one, and puts one there. However, in some cases it guesses wrongly, which leads to hard-to-find error. Here's an example taken from Appendix A of \"JavaScript: The Good Parts\"\n\nreturn \n{\n  status: true\n};\n\nBecause the return value starts on the line after the return keyword, the interpreter guesses there's a missing ';' after the return value and interprets the code above as:\n\nreturn ;\n{\n  status: true\n};\n\nSo the function actually returns 'undefined' instead of an object with a 'status' property. This feature of JavaScript is known as 'Semicolon Insertion' and seems is regarded my many (e.g. Douglas Crockford) as one of the worst features of JavaScript."}, {"author_name": "Chris Conway", "gravatar_hash": "c1cc649bda672575d17d588b81513dfd", "author_url": "http://procrastiblog.com", "date": "Mar 09, 2009", "message": "Wasn't Bill Gates last job title at MS \"Chief Software Architect\"? I wonder if this is a valid use of the term, by Joel and Jeff's lights? I also wonder if MS has Lesser Software Architects somewhere in the org chart?"}, {"author_name": "Rahul", "gravatar_hash": "1374b43b692ccd9ed477697a8fa2a0e9", "author_url": null, "date": "Mar 09, 2009", "message": "I think one good \\side effect\\ of having an architect title in a team is that in many places (specially big organizations), programmers are not considered important or worthy enough to take any high level design decisions. Having an architect ensures that such decisions are at least coming from someone who has a technical background and experience required to make such decisions. Otherwise, such decisions are left in the hands of inept Project Managers. If there is an architect, project managers usually don't poke their nose into technical discussions or decision making and leave it to the architect."}, {"author_name": "Donal", "gravatar_hash": "8b2d39a59a961ef26440e9c1453d1939", "author_url": null, "date": "Mar 10, 2009", "message": "@Hayden\nWhile it would be nice to have somebody on the the podcast to call out J&amp;J's misinformation about Java (or .Net, or whatever), I'm not sure Dick Wall would be a great choice. Not that he doesn't have the knowledge, but rather he's far too polite...."}, {"author_name": "Michael Meadows", "gravatar_hash": "954765ec98d01561285873097362e3ee", "author_url": "http://www.michaelmeadows.com", "date": "Mar 10, 2009", "message": "Application architects become more necessary in giganticorps, because they are capable of tapping the knowledge of all of the other systems in the enterprise.  They also coordinate with the domain architects (data, security, integration, etc).\n\nWhat they should NOT be doing is prescribing _how_ developers build a system.  They SHOULD participate (with the developers) in forming a strategy for the system, and share responsibility for code quality.  The problem is that most enterprises make architects superior to developer, whereas they should be coequal with lead developers."}, {"author_name": "Philip Hofstetter", "gravatar_hash": "117112d883960c8ed0e13823f88e45f1", "author_url": "http:/www.gnegg.ch", "date": "Mar 11, 2009", "message": "This is a repost of a private mail I've sent directly to Jeff (mainly becauce I didn't know about these show notes. Itunes subscriber since episode 1).\n\nJeff requested, I repost it here:\n\nIn your last episode 44, you talked about HTTP/1.0, proxies and\ncompression and I noticed a few factual errors, I'd like to talk\nabout.\n\nFirst, you asked why proxies still use HTTP/1.0. The answer to that is\nbasically our all-time favorite browser: IE6 (and probably 7 too):\nSomewhere in the advanced settings you'll find the option \"HTTP 1.1\nSettings\" with the checkbox \"Use HTTP 1.1 through proxy connections\"\nwhich, unfortunately, defaults to off and nobody ever goes there to\nchange it - at least not someone STILL using IE6.\n\nThis means that even the most up to date Proxy Server will be forced\nto use HTTP/1.0 when talking to a site as the client actually\nrequested HTTP/1.0.\n\nYour next point of discussion was about the changes between HTTP 1.0\nand 1.1. 1.1 was a evolutionary update which formalized many of the\nextensions that happened to HTTP 1.0 already and were in white-spread\nuse back then. One of these was the Host: header which is the way to\nhost multiple sites per IP address.\n\nBut unlike what Joel told you, HTTP/1.1 doesn't work by specifying the\ncomplete URL in the GET (or POST or any other) request, but by\nspecifying the Host-Header.\n\nSo you would not do\n\nGET http://www.stackoverflow.com/ HTTP/1.1\n\n(which by the way is the way you tell a proxy to request an URL for\nyou), but you'll do\n\nGET / HTTP/1.1\nHost: www.stackoverflow.com\n\nBut as we are using 1.1, this still is no valid request as one other\nimportant thing was added to 1.1: HTTP-KeepAlive - the ability to keep\na connection open for multiple requests. You do that by specifying the\nConnection:-Header (the second obligatory header in HTTP/1.1 -\nHTTP/1.0 had none):\n\nConnection: close\n\nor\n\nConnection: keep-alive\n\nCompression on the other hand was already defined in HTTP/1.0\n(http://www.ietf.org/rfc/rfc1945.txt, sections 2.3 and 3.5).\n\nThe real reason why IIS is reluctant to send compressed content to a\nproxy server is because of the proxies clients.\n\nYou see, a proxy server usually knows nothing about the content of the\npage (at least when we are talking about a proxy in its purest sense):\nIt requests a page for a client, stores it and sends the stored copy\non subsequent requests.\n\nBut what would happen if the first client sends the\n\"Accept-Encoing\"-Header and the second one doesn't?\n\nThe proxy would request the compressed page, store it in the cache and\nsend the compressed copy to the second client which doesn't support\ncompression.\n\nIn comes another header that's new in HTTP/1.1: Vary (RFC 2616,\nSection 14.44). This allows the server to specify that the content\noutput is dependent on the setting of any specific request header,\ninstructing proxies to invalidate a cached copy if another request for\nthe same URI, but with a different header content arrives.\n\nSo the server sends \"Vary: accept-encoding\" and the proxy knows that\nit must store different copies of the same URI when requested with\ndifferent content for accept-encoding.\n\nSo you see that it's not the lack of the Accept-Encoding header that\nmakes it unsafe to use compression over HTTP/1.0, it's the lack of the\nVary header.\n\nIt gets worse though:\n\nSupport for the Vary-header is to this day not as wide-spread in proxy\nservers as it should be. If there even is support, it's buggy and\nsometimes doesn't work correctly, which probably is one of the reasons\nfor IE's unfortunate default concerning the protocol to use when\ntalking over a proxy.\n\nAs long as this problem exists, you will not be able to force\ncompressed content out to your clients - unless you can live with some\npoor souls on old browsers (but see below - it gets even WORSE) seeing\ngarbage instead of Stack Overflow.\n\nOld browsers are one thing (every browser since about Netscape 4.06\nsupported Content-Encoding), but there's also the matter of these\n\"Internet Security\" products. Some of them are apparently unable to\ndecompress the response from servers and thus alter (*sigh*) any\noutgoing request to not contain the accept-encoding header, thus\ndegrading even the newest browser to pre Netscape 4.06 level in\nmatters of compression-support.\n\nI don't know what wonderful piece of software is responsible for that,\nbut I had real-life experience with such a case where the software I\ndevelop for my company wasn't able to properly connect to the server\n(using the standard WinInet-API) because I made some assumptions on an\naccept-encoding-header going through properly. Temporarily turning off\nthe locally installed internet security product helped.\n\nIn the end, I dealt with the (wrong) assumption, but to this day, that\nclient cannot send or receive compressed data.\n\nSo you see, unfortunately what seems so easy, in reality is quite hard\ndue to so many external factors.\n\nDon't we all love network programming?\n\n*sigh*\n\nPhilip"}, {"author_name": "Brad", "gravatar_hash": "567aa6336e957027230920f5ff2c1d56", "author_url": null, "date": "Mar 11, 2009", "message": "Yeah, I'm just getting into Scala and absolutely love it.  Functional programming in a dynamic language with static typing, type inference, multiple inheritance, runs on the JVM, fully interoperable with existing Java (Scala objects can use Java libraries/frameworks and be used by other Java classes).\n\nIt's the bee's knees."}, {"author_name": "Paul Barry", "gravatar_hash": "6661ef9d747db3af8896cd94959d717d", "author_url": "http://paulbarry.com", "date": "Mar 14, 2009", "message": "@Donal\n\n\"This feature of JavaScript is known as \u2018Semicolon Insertion\u2019 and seems is regarded my many (e.g. Douglas Crockford) as one of the worst features of JavaScript\"\n\nI think that case is extremely rare and I'm not sure it applies in all languages with semi-colon-optional syntax.  For example, read any introductory tutorial on Scala, and it will tout this as an advantage over Java:\n\nhttp://www.codecommit.com/blog/scala/scala-for-java-refugees-part-1\n\n\"It looks the spitting image of Java, except with half the useless constructs thrown out.  No semi-colons, ...\"\n\nhttp://www.artima.com/scalazine/articles/steps.html\n\n\"And although you haven't seen many of them, Scala does use semi-colons to separate statements as in Java, except that in Scala the semi-colons are very often optional, giving some welcome relief to your right pinky finger.\"\n\nI agree.  Semi-colons are simply a token that a lazy language design makes you put everywhere because they don't want to write a complex parser that can figure out where statements should terminate.  I think the ambiguity in this example you gave in JavaScript is extremely rare. I've never had that kind of bug in Ruby or JavaScript, which are the two languages that I program in most that do not burden the developer with unnecessary semi-colons."}, {"author_name": "wds", "gravatar_hash": "01bb891a03442bf5494b7e35804c6dc1", "author_url": null, "date": "Mar 14, 2009", "message": "A software architect's job does not make sense in small companies where ten people are trying to implement something. However, there are these big companies with big projects where there's several implementation teams, several clients and several companies involved. A software architect's job in such a company is to guide the entire process of eliciting requirements, building a high level overview of what the system will look like, deciding on a release schedule, a maintenance schedule etc. That sounds a bit like a program manager I think, but he serves as a peer of other managers, i.e. none of the managers involved in marketing, testing, development or human resources can pull rank on him.\n\nThere's more to it probably, but once you figure out that you're gonna, say, deploy your app on a certain type of hardware with a certain type of layout and some basic input/output scenario's, the rest of the work really goes to development and checking whether everything is keeping on target with the actual requirements. The last thing a software architect should do is tell you how to layout your classes, he should just tell you \"these are the modules we need, here's how they'll interact, design and implement this\".\n\nThat's to the best of my recollection what I've been told a software architect is (and does). A lot of that probably originates with the software engineering institute at CarnegieMellon. It just sounds like me Jeff and Joel have seen the term in entirely different situations than I'm thinking of. I don't know if SAs are useful, but I guess in some situations it might make sense."}, {"author_name": "Bill Karwin", "gravatar_hash": "05845ddff9dbf10e3d47edce7032bae7", "author_url": "http://karwin.blogspot.com", "date": "Mar 14, 2009", "message": "A Software Developer is responsible for implementing code to meet a functional specification.\n\nWhereas a Software Architect is responsible for writing the functional specification.  That includes interpreting the customer requirements and translating it into a software design.  A pure Program Manager may not have the technical background to do that.\n\nThat's the difference of the roles, at least to me.  Depending on the organization, the same person could be coding, writing a spec, and leading the project.\n\nI agree that an architect who has *no* coding duties is a recipe for disaster.\n\nOne way to exorcise a bad architect from a project is to present him or her with some real hands-on work, like debugging, or performance optimization, or writing JavaScript to detect the browser version.  They'll be very quick to come up with a reason they need to move on to another project, I guarantee it!"}, {"author_name": "Timo Saikkonen", "gravatar_hash": "f14533c4b39ed8104db2e6bc28607cc6", "author_url": "http://theiterator.com", "date": "Mar 20, 2009", "message": "Ditching software architects is a pretty idea and probably works well in the Fog Creek dreamworld.\n\nHowever, there's a whole reality out here where coders usually don't know what the klonk they are doing. Thus, architects are needed to make decisions about the overall structure and conventions of things.\n\nThe title in itself could just as well be senior software developer but time and time again I've witnessed that seniority in experience doesn't mean a whole lot when it comes to producing good software architecture.\n\nSure, architects (in my limited perspective) write code just like the rest of the developers, but the also carry the responsibility of creating clean and maintainable systems.\n\nOtherwise, keep on the good work guys. The podcast is interesting and nicely produced and Joel's writings have been a big influence.\n\nps. recaptcha sucks."}, {"author_name": "Rob Lloyd", "gravatar_hash": "1cb9f6b272544fa45d4c7e9411ec9109", "author_url": null, "date": "Apr 08, 2009", "message": "We have architects in the company I work for, which happens to be an investment bank as mentioned on the podcast. These guys are responsible for being the layer in between the direction the bank is going in, such as what we will be trading etc. and the actually systems. So it's less uml and software design and more platforms and how the platforms interact. I think the number of systems within companies like this and the amount these can change means that architects can save a large amount of money and time. So are often experienced programmers with a large amount of responsibility."}]}