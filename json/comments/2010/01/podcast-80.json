{"response": [{"author_name": "Artem", "gravatar_hash": "e519e735596b76d539a193bfabff1d81", "author_url": "http://catlion.name", "date": "Jan 21, 2010", "message": "You can try bitbucket.org - a GitHub for Mercurial."}, {"author_name": "Ruinen", "gravatar_hash": "b7a203617c3fb08e27a221d3c408e436", "author_url": null, "date": "Jan 21, 2010", "message": "I am struggling to understand Jeff's issues with the GitHub branch network graph. I have real-world instances where it has been extremely helpful. \n\nYou start using a well maintained project, everything is ticking along fine, but then the original developer goes AWOL. Suddenly a new browser comes out. BLAM!! the project no longer works, your website is broken, you are losing $$$$. You take a look at the network graph and you find the answer to the problem in one of the branches. You can use their change, get your project working again, and get on with your life."}, {"author_name": "William Shields", "gravatar_hash": "2f364c2e36b52bc80296cbf23da8b231", "author_url": "http://www.cforcoding.com", "date": "Jan 21, 2010", "message": "Hey, thanks for the mention. Work has been kicking my butt lately, which has slowed progress. I'm hoping to get something out before next weekend.\n\nI've come to the conclusion there's really two grammars in action in Markdown: the first is block-level. The second is inline. It's an interesting problem and I'm going to have to do some digging to find some literature on how to handle this kind of problem.\n\nI guess you have a two-pass parse of your input stream but I'm wondering if there's a more elegant solution than that.\n\nI also have to wonder if an (LA)LR(k) parser would handle this better than the LL(*) approach I was previously toying with."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> I guess you have a two-pass parse of your input stream\n\nAre you kidding me? The \"classic\" perl/regex implementations of Markdown do *dozens* of passes over the input. We've optimized a lot of the craziness away, so it's doing a more sane number of passes now, but it's still a lot.\n\nYou should take a look at the MarkdownSharp code again -- I've put the most relevant code (main loops) at the top of the file. In particular, one of the first operations is to hash away any raw HTML blocks in the input so they don't interfere with the Markdown itself..\n\nhttp://code.google.com/p/markdownsharp/source/browse/trunk/MarkdownSharp/Markdown.cs\n\n (remember, Markdown allows intermixing HTML and Markdown)"}, {"author_name": "William Shields", "gravatar_hash": "2f364c2e36b52bc80296cbf23da8b231", "author_url": "http://www.cforcoding.com", "date": "Jan 21, 2010", "message": "@Jeff,\n\nI know MarkdownSharp does dozens of passes--that's kinda the issue. I converted 1.06 to Java. I haven't done any of the subsequent releases, which are faster but because of optimized regexes not because the code has fundamentally changed.\n\nAlso, you're using the hash of the block as a key. It came up in the comments on one of my posts that this was the basis for an XSS vulnerability as the hash code was guessable and you could add it to your code. As such someone said people have been using MD5 hashes and the like because they're less guessable (or, rather, less reproducible with a desired string replacement).\n\nOn the subject of two passes, what I really mean is that there are two grammars in play. For example:\n\n&gt; This is a **test\n&gt; of bold**\n\nshould be a blockquoted paragraph with a bold element. Add a line:\n\n&gt; This is a **test\n&gt; of bold**\n========\n\nand the meaning *completely* changes.\n\nI can describe the block demarcation with a grammar. I can describe inline blocks with a grammar but I'm scratching my head trying to come up with one grammar that describes both parts. I'm not sure that's a problem however.\n\nAnd as for the \"dozens\" of passes, the most I think I need to do at this point is 3 and possibly only 2."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> which are faster but because of optimized regexes not because the code has fundamentally changed\n\nThe code has fundamentally changed. Diff 1.06 and 1.12 and tell me what you see.\n\n> Also, you\u2019re using the hash of the block as a key. It came up in the comments on one of my posts that this was the basis for an XSS vulnerability as the hash code was guessable and you could add it to your code.\n\nYou should try this in MarkdownSharp and see what happens."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> You take a look at the network graph and you find the answer to the problem in one of the branches. You can use their change, get your project working again, and get on with your life.\n\nI agree, but it totally doesn't scale -- how can I find anything in this graph?\n\nhttp://github.com/mangos/mangos/network\n\nAs I said in the show notes, what is desperately needed is a way for people to self-tag their timelines/pulls/branches as either private or \"not relevant to mainline\" or \"not eligible for merging\". This would alleviate the noise in a big way."}, {"author_name": "George", "gravatar_hash": "9ed3482ccbb461fbf8796b251caf8f4d", "author_url": "http://blog.yapb.net", "date": "Jan 21, 2010", "message": "I had no idea who 'William Shields' was. Then I saw the link and saw you meant cletus."}, {"author_name": "u62", "gravatar_hash": "221fc94982b5b7295f025c4386edb877", "author_url": null, "date": "Jan 21, 2010", "message": "There was a lot of talk about regexes versus state machines, which makes me think you're a bit confused. Regexes are implemented by state machines - they are in essence a very compact way of representing a class of state machines that take a stream of characters.\n\nThe point about using yacc (as Joel suggested in the previous podcast) is that they implement grammars which embody the concept of recursion - something that cannot be handled by a conventional state machine of the type generated from regular expressions.\n\nI haven't seen this code where someone has converted the regular expressions to 'state machines', but if they have it would be a redundant thing to do. If your goal is to perform many of the regular expression passes in one go, there is a tool for that: lex. Lex is normally used in a compiler front-end to recognise multiple regular expressions at the same time and output a token for each. But you can use it to output the recognised text, or an altered version of the recognised text, instead.\n\nWRT Cletus's issue of multiple passes, I wrote about this on meta because it was also my first thought about how to process Markdown with compiler tools. \n\nhttp://meta.stackoverflow.com/questions/35702/markdown-bnf-definition/35720#35720\n\nThe most sensible way to go about this, I think, is to do a 'pre-parse' stage where you convert runs of your indent tokens into pairs of begin-indent-level and end-indent-level tokens. Same for paras that end with underlines - detect when that occurs and insert a begin-heading and end-heading token in the stream. Otherwise you are trying to use a grammar to recognise overlapping sequences of tokens and that just ain't going to work."}, {"author_name": "Ikke", "gravatar_hash": "b6a1e3fd5aa3491eda6acc5973059ebd", "author_url": null, "date": "Jan 21, 2010", "message": "When people only want to pull the source, they'll just need to use the public link to your github repository. Then they won't show up on the network graph.\n\nIf they fork your project, they have the implicit meaning to merge it back again later. A forked project is quite tightly coupled to the original project."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> where someone has converted the regular expressions to \u2019state machines\u2019, but if they have it would be a redundant thing to do.\n\nIt's actually significantly (~20%+) faster to unroll the regex, than even to compile it. \n\nAt least in my benchmarking, it is!\n\nObviously this is a crazy thing to do in the typical case, it would be an insane micro-optimization, but but we had some pre-pass code in MarkdownSharp ...\n\n<pre>\n// normalize line endings\ntext = text.Replace(\"\\r\\n\", \"\\n\").Replace(\"\\r\", \"\\n\");\n// add a few lines at the end\ntext += \"\\n\\n\";\n// detab\ntext = Regex.Replace(text, @\"^(.*?)\\t\", ...);\n// remove space/tab-only lines\ntext = Regex.Replace(text, @\"^[ \\t]+$\", \"\", RegexOptions.Multiline);\n</pre>\n\n... which became the <code>Normalize()</code> routine ...\n\nhttp://code.google.com/p/markdownsharp/source/browse/trunk/MarkdownSharp/Markdown.cs#1613\n\n... and that's faster than those 4 lines of code, but it's (literally!) ten times more code, too."}, {"author_name": "William Shields", "gravatar_hash": "2f364c2e36b52bc80296cbf23da8b231", "author_url": "http://www.cforcoding.com", "date": "Jan 21, 2010", "message": "Unrolled regexes for the sake of unrolling regexes makes little to no sense. The benefits lie in the limitations of regexes, namely in that they are stateless (which is the same reason quoted as to why it's a bad idea--which it is--to use regexes to parse HTML).\n\nWith a pushdown automaton (rather than a deterministic finite automaton or deterministic finite state machine, which is what a regex is) a bunch of things get a whole lot easier.\n\nAlso such stateful code can check only when it needs to check. The regexes do what they can like using MULTILINE to start at line boundaries but even so, regexes don't scale nearly as well as a context-sensitive parser.\n\nOf course the parser is more lines of code to write."}, {"author_name": "William Shields", "gravatar_hash": "2f364c2e36b52bc80296cbf23da8b231", "author_url": "http://www.cforcoding.com", "date": "Jan 21, 2010", "message": "And it should also be pointed out that I'm not doing this for a 20% gain. I'm doing it for a 50x (not 50%) gain."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> the limitations of regexes, namely in that they are stateless\n\nExcept when they aren't... at least in the .NET flavor of regex:\n\nhttp://blog.stevenlevithan.com/archives/balancing-groups\n\n<pre>\n^\n(?=.*[a-z](?&lt;N&gt;)|)  # If a-z is found, push to the N stack\n(?=.*[A-Z](?&lt;N&gt;)|)  # If A-Z is found, push to the N stack\n(?=.*[0-9](?&lt;N&gt;)|)  # If 0-9 is found, push to the N stack\n(?&lt;-N&gt;){2}          # Pop the last two captures off the N stack\n.{8,}               # Match eight or more characters\n</pre>\n\nI'm sorry... did I just <i>blow your mind?!?!</i>\n\n.NET has an amazingly polished regex implementation, as you saw yourself -- the Java regexes were 2x as slow in your Java port on the same hardware. (I have run MarkdownSharp under Mono and it does not fare a whole lot better, unfortunately.)\n\n> I\u2019m not doing this for a 20% gain. I\u2019m doing it for a 50x (not 50%) gain.\n\nYes, but I already got 10x gain just by rebuilding the Markdown.NET code into MarkdownSharp and removing some of the (more obvious) insanity. See the benchmarks on the home page:\n\nhttp://code.google.com/p/markdownsharp/\n\nFor my purposes, this is good enough. All the remaining edge conditions (save one) I am comfortable ignoring.\n\nThere's no question that a proper parser will be faster, I've said that a hojillion times now. But as the ladies are known to say, \"Mr. Right Now\" is often more desirable than \"Mr. Right\"."}, {"author_name": "William Shields", "gravatar_hash": "2f364c2e36b52bc80296cbf23da8b231", "author_url": "http://www.cforcoding.com", "date": "Jan 21, 2010", "message": "Not to be pedantic but a regex with a stack technically isn't a regex anymore (namely the \"regular\" part is no longer strictly correct). :) But I digress...\n\nJeff, I fully appreciate your point about being \"good enough\". Speed wise I think thats certainly true. What concerns me more is correctness. Again, it's the same kind of problems you get parsing HTML with regexes (even ones with stacks).\n\nOne must also consider the issue of readability. Consider the GetBlockPattern() for, say, nested tags. That's gnarly. Consider my code:\n\nprivate boolean blockQuote() {\n    int start = index;\n    if (match(TokenType.START_QUOTE)) {\n        while (block()) {\n            // do nothing\n        }\n        if (match(TokenType.END_QUOTE)) {\n            return true;\n        }\n    }\n    index = start;\n    return false;\n}\n\nbased on the lexical structure that a block quote contains a number of blocks and you get the sort of recursive parser rule that you'd typically find in a \"true\" parser.\n\nXSS and hash codes is just one possible corner case. Finding and exploiting (or just demonstrating) those kinds of vulnerability have never been my schtick so I'll leave that as a purely theoretical unless someone can demonstrate it.\n\nI did notice the hash blocks are surrounded by \\x1A now. There's probably something else there making it difficult (if not impossible) to replicate a hash block value but I haven't looked too deeply into it with this version of the code."}, {"author_name": "Casey", "gravatar_hash": "110c3930cadc4091ee35d37dad78539c", "author_url": null, "date": "Jan 21, 2010", "message": "Just wanted to point out that mangos is and extreme example since it is the most forked project on GitHub: http://github.com/popular/forked"}, {"author_name": "Roger", "gravatar_hash": "4e2ee5dfb2826e5c10a64c309d94a0d9", "author_url": null, "date": "Jan 21, 2010", "message": "re: time tracking\n\nI have used PTM (Personal Task Manager) for about 15 months now.  It leaves the guesswork out of the 'what did I do today/this week/month' question.  It lets you see where the time is really going.\n\nhttp://ptm.sourceforge.net/"}, {"author_name": "Joel Coehoorn", "gravatar_hash": "0a699f767c7195e9c00d85083c6cd914", "author_url": null, "date": "Jan 21, 2010", "message": "@u62: I tend to think of unrolling a regex as the first step, not the final step.  You unroll it, and then you can take that unrolled code and refactor it into something faster and more elegant."}, {"author_name": "Brad Murray", "gravatar_hash": "e45a5c9fd07e92a412df56345d466146", "author_url": null, "date": "Jan 21, 2010", "message": "Augh listening to the first part of this podcast is maddening. Branches and full repository clones are different things. You wouldn't go to facebook and the first thing you do on someones profile is scroll through all of their friends. Just look at the repo you're interested in."}, {"author_name": "John Topley", "gravatar_hash": "3b687a35025c05dbc7627af428dff0da", "author_url": "http://johntopley.com/", "date": "Jan 21, 2010", "message": "Jeff,\n\nYour local Git repositories don't show up on GitHub until you push to the remote repository."}, {"author_name": "Ryan Graham", "gravatar_hash": "8bd1dd86bbf8705a5a702b86a2f3a390", "author_url": null, "date": "Jan 21, 2010", "message": "@Jeff: You only show up on the network graph if you \"fork\" the repo through the github interface. Your commits only become public if you push your commits to your github account. Once you do that, the project you forked from will see your commits show up in their fork queue. In the case of WMD, he's just not pulling in those changes. If someone just clones and pulls fro\n your repository, the will not show up. It is done anonymously.\n\nIn short, the people you are seeing in that network graph ARE flagging their changes as suitable for merging. There are a lot more people who have cloned/pulled the repo than are showing up on that graph.\n\nGitHub is for collaboration. If you don't want to share, don't publish it. Git is local by default, making your repository public takes effort."}, {"author_name": "Kevin Stewart", "gravatar_hash": "2d24ac395a9afa64daa8a7fd79cc13e1", "author_url": null, "date": "Jan 21, 2010", "message": "Jeff,\n   It is a little ironic that you don't \\get\\ GitHub when the philosophies behind it and Stack Overflow are actually pretty similar. Let me at least try and be helpful in explaining what you aren't getting.\n\n   In most hosted version control services, the model is generally based on the SourceForge model where the \\project\\ is the primary focus. The model is based on the older Open Source governance models where someone grants you commit rights based on whatever merit scale the project has adopted.\n\n   On GitHub, the primary focus is on the PERSON. If you listen to any early podcasts (or the upcoming one on The Changelog) about how GitHub was created, the major focus was on sharing code and letting people see how awesome your work is. The \\social coding\\ model is the result of this design decision. \n\n   Related to that are your issues around, \\How do I know which fork is the current/official one?\\ Well, our good friends at Google play a role in that as well. The GitHub founders have expressed that they feel that the \\official\\ status is transitory. Someone may start a project and for whatever reason do not move it forward. In the old model, the project may just end up abandoned or people who want to take it over don't have full administrative rights.\n\n  In the GitHub model, the community as a whole determines which branch they follow. If the main contributor stops contributing, anyone can create a new branch and people can just follow and use that branch instead. If there is more activity around a particular branch, that may become the de facto official branch. With the pages being public, they are indexable and thus Google juice is obtained.\n\n   So, GitHub promotes a model where people can show how awesome they are and expose that to Google. The focus is around the INDIVIDUAL as opposed to the PROJECT (although there are ways to simulate the project model on GitHub). Thus, the similarity I alluded to with Stack Overflow.\n\n  When you originally were looking for a place to host WMD, you asked the community and they responded \\GitHub\\. And that may have been their personal preference even though they themselves were never going to contribute to WMD. Just like picking a school or deciding if your kid can hang out with certain other kids, it was YOUR responsibility to investigate and decide if GitHub was appropriate for your use. I personally prefer GitHub to Google Code, but that's my PREFERENCE. It works for me. It may work for you if you subscribe to GitHub's core tenets. With your background, I would guess that it doesn't fit what you're accustomed to, but you seem pretty open-minded so I suspect you could adapt IF YOU CHOSE. And, if you don't we don't love or hate you any more for it! :-)\n\nKevin"}, {"author_name": "Paul Nathan", "gravatar_hash": "fc3225dc3119500fcbf7af646a83c914", "author_url": null, "date": "Jan 21, 2010", "message": "As a consumer of software, having One Hojillion Forks of a project is decidedly Do. Not. Want. Two forks is bad enough(I ran into that that with zenburn.el). I'm not genuinely interested in digging around and figuring out which fork is more recent, which fork suits me better, and all the other esoteric kind of questions that start coming into play. XEmacs and Emacs has the same issue.\n\nI just want the blamey software to work, and work well, and not be hard to get, install, run, or figure out.\n\nAs a consumer, GitHub's philosophy is nearly antithetical to how I want to consume software. SourceForge, on the other hand, provides me with my preferred consumption method.\n\nAs a programmer, I use Bitbucket for storing projects that I feel might be of interest to other people or spread across my local network or usable in some sort of portfolio. But that's because I feel hg &gt;&gt; git. ;-)"}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "w/r/t \"social coding\"\n\nhttps://twitter.com/codinghorror/status/7966519221\n\n> The focus is around the INDIVIDUAL as opposed to the PROJECT (although there are ways to simulate the project model on GitHub). Thus, the similarity I alluded to with Stack Overflow.\n\nAh, so the first \"fork\" would be someone adding a friends list and zombie pokes to the Stack Overflow codebase -- and I'd have no choice but to allow that to show up attached to my project network timeline. Fan-frickin'-tastic."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> Your local Git repositories don\u2019t show up on GitHub until you push to the remote repository.\n\nWhich, presumably, people do because they want their code changes (for whatever purpose -- even if it's just some one-off changes they're making for a pet project) backed up in the cloud and not just on their local PC.\n\nI have the same objections stated earlier."}, {"author_name": "Kevin Stewart", "gravatar_hash": "2d24ac395a9afa64daa8a7fd79cc13e1", "author_url": null, "date": "Jan 21, 2010", "message": "&gt; Ah, so the first \u201cfork\u201d would be someone adding a friends list and zombie pokes to the Stack Overflow codebase \u2014 and I\u2019d have no choice but to allow that to show up attached to my project network timeline. Fan-frickin\u2019-tastic.\n\nJeff, I think the issue is that you are having trouble with ONE feature of GitHub (the network graph) but railing against the entire service, which I know is not your intent but perception is reality...\n\nThe network graph is less a \\timeline\\ and more an activity graph. So, is the visualization perfect or accurate? Maybe not. But, it seem like you missed the intent.\n\nIf you want to control who can branch and contribute to your projects(s), you can:\n\na) Pay (shudder) for a GitHub account and make your project private and invite WHO YOU WISH to collaborate \nb) Pick a service that better meets your needs (like Joel's Kiwi perhaps?)\n\nI'm not trying to pick a fight with you (I'd probably lose anyway). It just seems wrong to rail against GitHub as a whole because it doesn't fit the way YOU want it to work. No one is saying that your way is right or wrong and the same applies to GitHub. \n\nI would, gently, suggest that you dig a little deeper first before investing in any tool or service to see if it might be a fit for you. While I firmly believe in the principles of \\release early, release often\\ that only really works for code. For subjective opinions, it is kind of dangerous. And, it feeds the trolls!\n\nI do hope you take the time to look into GitHub more deeply, rad the GitHub team's blog or better yet invite @pjhyett, @defunkt and @mojombo to talk to you guys on the podcast. They're generally pretty accessible and I think it would be a pretty awesome discussion.\n\nI still love ya, man! Even when you frustrate the hell out of me! :-)\n\nKevin"}, {"author_name": "Steve Wortham", "gravatar_hash": "7c4d1e4f8701946b8391d009d8d85221", "author_url": "http://regexhero.net/", "date": "Jan 21, 2010", "message": "About documentation:\n\nOne issue with trying to document your project manually is that in order for it to be really useful you really have to stay on top of it.  If you get lazy, the documentation won't be accurate anymore, and then what's the point?\n\nHowever, there was one issue in particular where we absolutely needed some documentation.  We're building a website and internal application that hold thousands of fields of data from questions on our website.  The trouble is that it can be difficult to track down which questions we ask and when.\n\nSo I had an idea to take care of this.  Rather than trying to document all of this manually, we instead document it through a coding practice.  For example, in every user control we use an Enum called eQuestions which includes the ID for each question that we ask on that control.  We can then use a custom in-house documentation builder that uses Reflection to grab these Question ID's and tells us where everything is.  The benefit of documenting with a coding practice like this is that the code and the documentation will always be in sync.\n\nIn a similar fashion we're also creating verbose comments for every function which can then be parsed with a tool to build our documentation."}, {"author_name": "J\u00f6rg W Mittag", "gravatar_hash": "0bfe384bf9dce3cc1fda1bb0ff5f4e0e", "author_url": null, "date": "Jan 21, 2010", "message": "@Jeff Atwood: I fail to see how anything you complain about is in any way related to GitHub.\n\nYou are correct in that the situation is bad, but the cause of that situation is not GitHub, it's crappy leadership of the WMD project. Having multiple maintainers in a row fall off the face of the earth in just a couple of months would be devastating to *any* project. But again: nothing to do with GitHub."}, {"author_name": "Nick P.", "gravatar_hash": "63e9c00d834cf45871a1326daaeecccd", "author_url": null, "date": "Jan 21, 2010", "message": "Gotta say, it was kind of painful to listen for fifteen minutes until Joel actually addressed the concern Jeff was really raising about GitHub."}, {"author_name": "Chris", "gravatar_hash": "b6b87721c444078a99633d6ed9352cec", "author_url": null, "date": "Jan 21, 2010", "message": "It seems like the solution for the Github issue is pretty simple.  As Jeff said, there needs to be a way to signal whether a given fork is intended for public consumption or just someone messing around for their own use.  Make the default network graph one that only shows forks intended for public consumption."}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jan 21, 2010", "message": "> But again: nothing to do with GitHub.\n\nSure it is -- when checkins like \"just messing around\" (I'm paraphrasing here, but it's close) show up in the main project timeline, that's .. not what I had in mind for collaborative development.\n\n> Make the default network graph one that only shows forks intended for public consumption.\n\nThat's all I'm saying. Like wikipedia's \"minor edits\".\n\nPeople want to check in \"in the cloud\" to get the code off their personal machines and somewhere that's backed up -- this should not clutter up the main development lines."}, {"author_name": "guns", "gravatar_hash": "07753eafe3674d0344ff4225bd6fbb04", "author_url": null, "date": "Jan 21, 2010", "message": "\"There must be a way to express intent about your personal fork.\"\n\nGithub calls it a pull request:\n\nhttp://github.com/guides/pull-requests"}, {"author_name": "John Topley", "gravatar_hash": "3b687a35025c05dbc7627af428dff0da", "author_url": "http://johntopley.com/", "date": "Jan 22, 2010", "message": "Surely if people just want to mess around with the code then they should be cloning the repo instead of forking it?"}, {"author_name": "developingchris", "gravatar_hash": "1ce04312daddc2060e9f6d87805cad2a", "author_url": null, "date": "Jan 22, 2010", "message": "Thanks @guns\nI was literally screaming at my ipod, \"its called a pull request\". I'm sorry Jeff, I really enjoy most things you do, and I really don't like Git. Not because I don't understand it, because I like mercurial's native nature on windows. \n\nThis is not just a github issue. Every tutorial on how to do git, will tell you need your own cloud backup and then you need a map to upstream. Thats whats going on, in github parlance having a github clone that you can locally clone is called a fork. Once you have something to contribute to upstream you put it on your clone master in github and issue a pull request. Its not dead simple, its just a mixing of words and concepts.\n\nIntent is there, you have just over used a poor metaphor in that graph to describe the momentum of the development. I'm sorry that your OSS projects are so poorly managed that there is no real release or 1 github site for them, but is that really github's doing?"}, {"author_name": "Adam", "gravatar_hash": "e01d4fc7adb3dcd3101e13dc195c91ba", "author_url": "http://koldfront.dk/", "date": "Jan 22, 2010", "message": "@John Topley: I think you've hit the nail on the head: The problem is a social one (no need to \"fork\" unless you're going to ask the original to pull your changes), and a terminology one; github naming it \"fork\" is weird (because of all of the connotations)."}, {"author_name": "Chris-S", "gravatar_hash": "f8869c89889c2ceff0fc7d7a253d9f8b", "author_url": "http://www.shrinkrays.net", "date": "Jan 22, 2010", "message": "Is part of the reason Markdown wasn't approached as proper markup language because it was born out of forum-based markup like BBCode? Last time I looked those were all regex-based like PHPBB."}, {"author_name": "John Topley", "gravatar_hash": "3b687a35025c05dbc7627af428dff0da", "author_url": "http://johntopley.com/", "date": "Jan 22, 2010", "message": "@Adam: Yes, the \"fork\" name is a weird one. I think Joel even mentioned it in the podcast i.e. normally an open-source project forks when there's an irreconcilable schism in the project (e.g. GNU Emacs and XEmacs). With the GitHub usage, forking is declaring an intent to have your changes merged back in at some point. Perhaps \"Collaborate\" might have been a better verb.\n\nI don't think Jeff did himself any favours on this one though. The impression I get is that he had an insufficient understanding of how Git works in the first place and then mouthed off on Twitter and in this podcast based on that misunderstanding, in particular obsessing over one minor GitHub UI feature.\n\nNumerous people (including the GitHub guys) made public offers of help, but instead he's thrown all his toys out of the pram: https://twitter.com/codinghorror/status/8058459347\n\nIf GitHub can handle a project as popular as Rails, then I'm sure it could in fact, work well for WMD."}, {"author_name": "Chris Conway", "gravatar_hash": "c1cc649bda672575d17d588b81513dfd", "author_url": "http://procrastiblog.com", "date": "Jan 22, 2010", "message": "&gt; I agree, but it totally doesn\u2019t scale \u2014 how can I find anything in this graph?\n\n&gt; http://github.com/mangos/mangos/network\n\nSomebody over at GitHub is paying attention:\n\n\\Sorry, this repository's graph is currently too logical awesome to display. We're working on optimizing it. Check back soon.\\"}, {"author_name": "Skilldrick", "gravatar_hash": "2b0a93dc132be4bf3b15b50c8a7e8089", "author_url": "http://www.skilldrick.co.uk", "date": "Jan 22, 2010", "message": "Hey Jeff. I really respect what you do in general, and it's nice that you open-sourced this.\n\nBut seriously. All you're doing in the first bit of this podcast is betraying your own ignorance. Like Joel says, you need to invest a bit of time in Git and GitHub. You've misunderstood some core concepts, and turned that into a huge rant against a great service.\n\nI'll admit, Git (and by definition GitHub) do have a touch of elitism about them. But you should have known that. If what you wanted was a simple, idiot-proof hosting service for your open-source project, maybe you should have shopped around a bit more."}, {"author_name": "Steven Schpielberg", "gravatar_hash": "a65efb154b6cf11ee1fbb5c503927dba", "author_url": null, "date": "Jan 22, 2010", "message": "The classic \"25 lines of code\" segment of the podcast immortalized as a movie: http://www.xtranormal.com/watch/5994397/"}, {"author_name": "Chris-S", "gravatar_hash": "f8869c89889c2ceff0fc7d7a253d9f8b", "author_url": "http://www.shrinkrays.net", "date": "Jan 23, 2010", "message": "The whole attitude of \"you just don't get it\" with Github is the same attitude I got when I complained about having to change the resolution of your desktop in X via its .conf file back before Ubuntu and rest made it more user friendly. \n\nI can see git works well when you have to all edit one source file like jQuery: http://github.com/jquery/jquery/network but that doesn't mean the site (not the source control) itself is easy to use"}, {"author_name": "Skilldrick", "gravatar_hash": "2b0a93dc132be4bf3b15b50c8a7e8089", "author_url": "http://www.skilldrick.co.uk", "date": "Jan 23, 2010", "message": "@Steven - Classic!"}, {"author_name": "something", "gravatar_hash": "d51a773f5b51412869489e07bcf9aae1", "author_url": null, "date": "Jan 23, 2010", "message": "I sure hope there's a good reason that Kevin Stewart's recent comment was deleted, because that reeks of you trying to save face with a week argument."}, {"author_name": "William Shields", "gravatar_hash": "2f364c2e36b52bc80296cbf23da8b231", "author_url": "http://www.cforcoding.com", "date": "Jan 24, 2010", "message": "Here's an update:\n\nhttp://www.cforcoding.com/2010/01/markdown-and-introduction-to-parsing.html"}, {"author_name": "Bob", "gravatar_hash": "0b99033319a7f46661aaf0324c47f335", "author_url": null, "date": "Jan 24, 2010", "message": "I think what Joel was calling \"train tracks\" is a form of railroad diagram.  Burroughs (now Unisys) used railroad diagrams extensively for documenting syntax in its language reference manuals."}, {"author_name": "lhahne", "gravatar_hash": "33974ac55e5240bcc34a067a5644726c", "author_url": null, "date": "Jan 28, 2010", "message": "Does anyone know how Gitorious compares to Github? It is used by several big projects such as Nokia's Qt and Maemo."}, {"author_name": "VonC", "gravatar_hash": "4fc12eea3fb81ede59d064d0fdbb84ab", "author_url": "http://stackoverflow.com/users/6309/vonc", "date": "Feb 10, 2010", "message": "Very interesting post on Git:\n\nhttp://alblue.blogspot.com/2010/02/git-for-eclipse-users.html\n\n- Forks happen\n- There is no master repository (but rather a \"matrix\" of them, generally self-organized as a tree)\n\nThe best (\"matrix-related\") extract of this article:\n\n\"Do not try to bend the master repository \u2013 that's impossible. Instead, only try to realize the truth; there is no master repository.\""}, {"author_name": "Simon Kenyon Shepard", "gravatar_hash": "29c12ce752edc39c52613a5e71454324", "author_url": "http://www.trisis.co.uk", "date": "Feb 17, 2010", "message": "Must agree with Jeff on the documentation thing, unit testing is by far the best way to create documentation. That and re factoring and using helpful variable names are far more important than documentation. In fact going back to the parser vs. regex argument you should really read:\nhttp://www.antlr.org/wiki/display/ANTLR3/Test-Driven+Development+with+ANTLR"}, {"author_name": "Kevin LaCoste", "gravatar_hash": "7ef116814934b73f17efc48ca3cff2e5", "author_url": null, "date": "Mar 11, 2010", "message": "Wow, guys, first time listener and I just wanted to comment that this was really frustrating to get through. Ranting against something (in this case, GitHub) without understanding it isn't really useful to anybody. I kept thinking that maybe Jeff, after stating his case, would pipe down for a moment and Joel might be able to offer his perspective and some intelligent discussion might come of it. Instead we got Jeff continually interrupting and short-circuiting things. If this is meant to be interesting for the listener, please try learning a little about your topic first. And failing that, at least take turns!"}]}