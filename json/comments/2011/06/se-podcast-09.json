{"response": [{"author_name": "Pat", "gravatar_hash": "cf5be907f3bff0fa48980e7bfe5bf009", "author_url": null, "date": "Jun 22, 2011", "message": "Love the podcast.  Very insightful guest.  But...can you please figure out the whole audio levels thing?  It was wayyyy better before you had a \"producer\".  Seriously...the instapaper dude was about twice as loud as Joel, who was about 1.4 times as loud as Jeff, and then when producer Alex decided to start contributing to the discussion he was pretty much totally inaudible.  You are driving my family crazy when I subject them to this podcast while driving around town and having to jack the volume around constantly just to follow the conversation.  I figure you realize this already and I hate to complain about getting something for nothing, but I had to get that off my chest!"}, {"author_name": "Jeff Atwood", "gravatar_hash": "51d623f33f8b83095db84ff35e15dbe8", "author_url": "http://www.codinghorror.com/blog/", "date": "Jun 23, 2011", "message": "@pat this week might be worse than usual because we had some fairly serious mic issues with Greg (unfortunately). We're going to make it a habit of purchasing USB mics for guests and shipping it to them in advance to help reduce potential sound quality problems."}, {"author_name": "BrunoLM", "gravatar_hash": "ef1a0f00d57917768acdc5b379ca1b28", "author_url": "http://www.orkutmanager.net/", "date": "Jun 23, 2011", "message": "Congratulations for all your podcasts!\n\nThis one particularly is very, *very* interesting."}, {"author_name": "BradC", "gravatar_hash": "c5c2165949f71bcd1fafbd8e694ab5f2", "author_url": null, "date": "Jun 23, 2011", "message": "Jeff- Its not just MIC quality. Can't you just record each person on a different channel, so you can post-mix volume levels for each person as needed before publishing?\n\nOtherwise, I've been enjoying your resumed podcasts!"}, {"author_name": "Andrew", "gravatar_hash": "7fce7532e99c3d698f3500f68a123c14", "author_url": null, "date": "Jun 23, 2011", "message": "Excellent guest this week. It was very interesting."}, {"author_name": "Pat", "gravatar_hash": "cf5be907f3bff0fa48980e7bfe5bf009", "author_url": null, "date": "Jun 23, 2011", "message": "I intended my above comment re: the audio levels to apply to episode 8.  Now I've listened to this one as well.  So glad you had Joel there as counterpoint to what Greg had to say.  Anyone who leads off with \"we've never measured\" and other \"we've never\" conclusions not borne out by reality instantly loses me.  What about CMM, Watts Humphrey, and the TSP?  What about all of the applications of Six Sigma to software teams?  I wouldn't suggest those approaches as a panacea, but there is a significant body of work on software process measurement.  Those methods are not without flaws:  as Joel mentioned, almost no software processes are truly repeated, metrics are gamed, teams in large orgs are often split up after a release, and these measurement methods are usually over-done or not \"change managed\" very well, leading to lack of buy-in at the individual developer level, or worse at the exec/stakeholder level.  The meta-point that improvement requires measurement remains hard to argue with, but it takes mature and effective management and developers to do it without introducing negative side effects.  One element of TSP I always liked was that developers each do their own personal process analysis and measurement, with the data being private to the developer."}, {"author_name": "Dan", "gravatar_hash": "6c365385b6d0fd8b3489349038c9746c", "author_url": "http://blog.uncommons.org", "date": "Jun 24, 2011", "message": "I agree with BrunoLM and Andrew.  This was one of the better SE Podcasts.  More like this please."}, {"author_name": "maeghith", "gravatar_hash": "88b9eb83c552686a5b21f09bc61197e8", "author_url": null, "date": "Jun 25, 2011", "message": "Congratulations for an amazing podcast. This one is one of the best I've heard from you, guys.\n\n\u00abGreg points out that the irony is that the single most correlated measure of productivity is simply lines of code written.\u00bb\n\nActually the correlation Greg does is not LOC-productivity, but LOC-bugs. But he does it after Joel rants on LOC-productivity and it may be a bit misleading, even though Greg itself clarifies it because Joel seemed a bit confused by the small turn Greg gave to the topic."}, {"author_name": "Jay L. Stevens", "gravatar_hash": "770eb708789729b6ccbae9e2973e9996", "author_url": "http://www.centerlinescores.com", "date": "Jun 26, 2011", "message": "TOTALLY agreed with @Pat.  Approaching software development as an \"engineering discipline\" is NOT a new idea.  It is this type of analogy (\"it's like designing and building a skyscraper\") and way of thinking that lead to the rigorous \"process control\" (RUP, UML, SEI, CMMI, etc.) that the Agile manifesto was a backlash to.  I'm just as much a data-junky as the next guy looking for evidence-based solutions, but to claim that \"this has never been done before\" is a little naive.  SEI/CMM started in the 80's and they were all about measurement. This is what the whole Rational software suite was supposed to do for us, right?  Measure everything so that we could improve process?  In my experience, that didn't work nearly as well as advertised.  \n\nActually building working software that does useful things is most important.  I ALWAYS love the idea of more empirical data to confirm or deny anecdotal evidence, but it needs to be secondary to common sense real-world software processes."}, {"author_name": "Adrian Petrescu", "gravatar_hash": "9b197571b0eb5e2fbfaf2cee5afabc8a", "author_url": "http://apetresc.wordpress.com", "date": "Jul 03, 2011", "message": "I wonder if Joel realizes that Qiaochu Yuan is not just some MIT intern, but in fact one of the most promising young mathematicians in all of America :) They're extremely lucky to have him."}, {"author_name": "Neal", "gravatar_hash": "357a20e8c56e69d6f9734d23ef9517e8", "author_url": null, "date": "Jul 09, 2011", "message": "That Microsoft link is NOT about predictors of bug rates; it is about predictors of bugs being fixed: start off with the bug database and then looked at bugs which got fixed.\n\nSo a bug is most likely to be fixed if it is assigned to the person who opened it and least likely to be fixed if it assigned to somebody in another country or a temporary employee."}, {"author_name": "Guy", "gravatar_hash": "26b8325f7fc2bbf90b7030f48936f21f", "author_url": null, "date": "Jul 11, 2011", "message": "Joel's discussion of engineering tweaking (rather than science) [34m:20s] reminded me of an Amory Lovin's presentation on car fuel efficiency. Someone (maybe BMW) developed a new ultra-lightweight component for their engine. They thought everything had been addressed. The component matched or bettered the traditional component in all the key qualities, and being lighter would make the car more efficient. However when introduced the engine vibrated far more than expected. What had happened is that over the years the car designers had tweaked the car in lots of places to balance the vibration of the old heavier component. With the lighter component the current car was actually worse."}, {"author_name": "Keith", "gravatar_hash": "7065f82b5fcc1d7298a9f0308fcaa612", "author_url": null, "date": "Oct 13, 2011", "message": "I think the correct link is http://research.microsoft.com/apps/pubs/default.aspx?id=70535"}, {"author_name": "Illotus", "gravatar_hash": "15052c66a9d2a1cbac630ee9262385b3", "author_url": null, "date": "Jan 07, 2012", "message": "This podcast got me to read the Making Software and after bit over half it is very very good indeed. I was very surprised that TDD is so underwhelming based on research and that pair programming seems so good. \n\n\" Actually building working software that does useful things is most important. I ALWAYS love the idea of more empirical data to confirm or deny anecdotal evidence, but it needs to be secondary to common sense real-world software processes.\"\n\nIf you think a bit this is ridiculous statement. In essence you are saying that science is nice, but anecdotes are nicer. Common sense real-world software processes are nothing but anecdotes without the research to back them up."}, {"author_name": "Piotr Dobrogost", "gravatar_hash": "b12f7c10f72b7ac3daaa98f0a3bc0718", "author_url": null, "date": "Mar 23, 2012", "message": "It's a year since maeghith reported an error in the description of what Greg Wilson said but it still hasn't been fixed..."}]}